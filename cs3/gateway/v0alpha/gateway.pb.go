// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/gateway/v0alpha/gateway.proto

package gatewayv0alphapb

import (
	context "context"
	fmt "fmt"
	v0alpha6 "github.com/cs3org/go-cs3apis/cs3/appregistry/v0alpha"
	v0alpha1 "github.com/cs3org/go-cs3apis/cs3/auth/v0alpha"
	v0alpha5 "github.com/cs3org/go-cs3apis/cs3/ocmshareprovider/v0alpha"
	v0alpha3 "github.com/cs3org/go-cs3apis/cs3/preferences/v0alpha"
	v0alpha4 "github.com/cs3org/go-cs3apis/cs3/publicshareprovider/v0alpha"
	rpc "github.com/cs3org/go-cs3apis/cs3/rpc"
	v0alpha "github.com/cs3org/go-cs3apis/cs3/storageprovider/v0alpha"
	types "github.com/cs3org/go-cs3apis/cs3/types"
	v0alpha7 "github.com/cs3org/go-cs3apis/cs3/userprovider/v0alpha"
	v0alpha2 "github.com/cs3org/go-cs3apis/cs3/usershareprovider/v0alpha"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetQuotaRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetQuotaRequest) Reset()         { *m = GetQuotaRequest{} }
func (m *GetQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*GetQuotaRequest) ProtoMessage()    {}
func (*GetQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{0}
}

func (m *GetQuotaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetQuotaRequest.Unmarshal(m, b)
}
func (m *GetQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetQuotaRequest.Marshal(b, m, deterministic)
}
func (m *GetQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQuotaRequest.Merge(m, src)
}
func (m *GetQuotaRequest) XXX_Size() int {
	return xxx_messageInfo_GetQuotaRequest.Size(m)
}
func (m *GetQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQuotaRequest proto.InternalMessageInfo

func (m *GetQuotaRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetQuotaRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type ListRecycleRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The start time range to query for recycle items.
	// The value is the Unix Epoch timestamp in seconds.
	FromTs *types.Timestamp `protobuf:"bytes,3,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The end time range to query for recycle items.
	// The value is Unix Epoch timestamp in seconds.
	ToTs                 *types.Timestamp `protobuf:"bytes,4,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRecycleRequest) Reset()         { *m = ListRecycleRequest{} }
func (m *ListRecycleRequest) String() string { return proto.CompactTextString(m) }
func (*ListRecycleRequest) ProtoMessage()    {}
func (*ListRecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{1}
}

func (m *ListRecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRecycleRequest.Unmarshal(m, b)
}
func (m *ListRecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRecycleRequest.Marshal(b, m, deterministic)
}
func (m *ListRecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecycleRequest.Merge(m, src)
}
func (m *ListRecycleRequest) XXX_Size() int {
	return xxx_messageInfo_ListRecycleRequest.Size(m)
}
func (m *ListRecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecycleRequest proto.InternalMessageInfo

func (m *ListRecycleRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListRecycleRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *ListRecycleRequest) GetFromTs() *types.Timestamp {
	if m != nil {
		return m.FromTs
	}
	return nil
}

func (m *ListRecycleRequest) GetToTs() *types.Timestamp {
	if m != nil {
		return m.ToTs
	}
	return nil
}

type ListRecycleStreamRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The start time range to query for recycle items.
	// The value is the Unix Epoch timestamp in seconds.
	FromTs *types.Timestamp `protobuf:"bytes,3,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The end time range to query for recycle items.
	// The value is Unix Epoch timestamp in seconds.
	ToTs                 *types.Timestamp `protobuf:"bytes,4,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRecycleStreamRequest) Reset()         { *m = ListRecycleStreamRequest{} }
func (m *ListRecycleStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ListRecycleStreamRequest) ProtoMessage()    {}
func (*ListRecycleStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{2}
}

func (m *ListRecycleStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRecycleStreamRequest.Unmarshal(m, b)
}
func (m *ListRecycleStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRecycleStreamRequest.Marshal(b, m, deterministic)
}
func (m *ListRecycleStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecycleStreamRequest.Merge(m, src)
}
func (m *ListRecycleStreamRequest) XXX_Size() int {
	return xxx_messageInfo_ListRecycleStreamRequest.Size(m)
}
func (m *ListRecycleStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecycleStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecycleStreamRequest proto.InternalMessageInfo

func (m *ListRecycleStreamRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetFromTs() *types.Timestamp {
	if m != nil {
		return m.FromTs
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetToTs() *types.Timestamp {
	if m != nil {
		return m.ToTs
	}
	return nil
}

type PurgeRecycleRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PurgeRecycleRequest) Reset()         { *m = PurgeRecycleRequest{} }
func (m *PurgeRecycleRequest) String() string { return proto.CompactTextString(m) }
func (*PurgeRecycleRequest) ProtoMessage()    {}
func (*PurgeRecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{3}
}

func (m *PurgeRecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeRecycleRequest.Unmarshal(m, b)
}
func (m *PurgeRecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeRecycleRequest.Marshal(b, m, deterministic)
}
func (m *PurgeRecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeRecycleRequest.Merge(m, src)
}
func (m *PurgeRecycleRequest) XXX_Size() int {
	return xxx_messageInfo_PurgeRecycleRequest.Size(m)
}
func (m *PurgeRecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeRecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeRecycleRequest proto.InternalMessageInfo

func (m *PurgeRecycleRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *PurgeRecycleRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type InitiateFileDownloadResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The endpoint where to downooad the data.
	// The value MUST be a Uniform Resource Identifier (URI)
	// as specified in RFC 3986.
	DownloadEndpoint string `protobuf:"bytes,3,opt,name=download_endpoint,json=downloadEndpoint,proto3" json:"download_endpoint,omitempty"`
	// REQUIRED.
	// Tells to the gateway if the client should be exposed directly to the download_endpoint.
	Expose bool `protobuf:"varint,5,opt,name=expose,proto3" json:"expose,omitempty"`
	// OPTIONAL.
	// A token that MUST be validated by the data gateway for the upload.
	// Only makes sense for uploads passing through the data gateway.
	Token                string   `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitiateFileDownloadResponse) Reset()         { *m = InitiateFileDownloadResponse{} }
func (m *InitiateFileDownloadResponse) String() string { return proto.CompactTextString(m) }
func (*InitiateFileDownloadResponse) ProtoMessage()    {}
func (*InitiateFileDownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{4}
}

func (m *InitiateFileDownloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateFileDownloadResponse.Unmarshal(m, b)
}
func (m *InitiateFileDownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateFileDownloadResponse.Marshal(b, m, deterministic)
}
func (m *InitiateFileDownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateFileDownloadResponse.Merge(m, src)
}
func (m *InitiateFileDownloadResponse) XXX_Size() int {
	return xxx_messageInfo_InitiateFileDownloadResponse.Size(m)
}
func (m *InitiateFileDownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateFileDownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateFileDownloadResponse proto.InternalMessageInfo

func (m *InitiateFileDownloadResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InitiateFileDownloadResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *InitiateFileDownloadResponse) GetDownloadEndpoint() string {
	if m != nil {
		return m.DownloadEndpoint
	}
	return ""
}

func (m *InitiateFileDownloadResponse) GetExpose() bool {
	if m != nil {
		return m.Expose
	}
	return false
}

func (m *InitiateFileDownloadResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type InitiateFileUploadResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The endpoint where to upload the data.
	// The value MUST be a Uniform Resource Identifier (URI)
	// as specified in RFC 3986.
	UploadEndpoint string `protobuf:"bytes,3,opt,name=upload_endpoint,json=uploadEndpoint,proto3" json:"upload_endpoint,omitempty"`
	// REQUIRED.
	// List of available checksums
	// the client can use when sending
	// the file.
	AvailableChecksums []*v0alpha.ResourceChecksumPriority `protobuf:"bytes,4,rep,name=available_checksums,json=availableChecksums,proto3" json:"available_checksums,omitempty"`
	// OPTIONAL.
	// A token that MUST be validated by the data gateway for the upload.
	// Only makes sense for uploads passing through the data gateway.
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitiateFileUploadResponse) Reset()         { *m = InitiateFileUploadResponse{} }
func (m *InitiateFileUploadResponse) String() string { return proto.CompactTextString(m) }
func (*InitiateFileUploadResponse) ProtoMessage()    {}
func (*InitiateFileUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{5}
}

func (m *InitiateFileUploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateFileUploadResponse.Unmarshal(m, b)
}
func (m *InitiateFileUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateFileUploadResponse.Marshal(b, m, deterministic)
}
func (m *InitiateFileUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateFileUploadResponse.Merge(m, src)
}
func (m *InitiateFileUploadResponse) XXX_Size() int {
	return xxx_messageInfo_InitiateFileUploadResponse.Size(m)
}
func (m *InitiateFileUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateFileUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateFileUploadResponse proto.InternalMessageInfo

func (m *InitiateFileUploadResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InitiateFileUploadResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *InitiateFileUploadResponse) GetUploadEndpoint() string {
	if m != nil {
		return m.UploadEndpoint
	}
	return ""
}

func (m *InitiateFileUploadResponse) GetAvailableChecksums() []*v0alpha.ResourceChecksumPriority {
	if m != nil {
		return m.AvailableChecksums
	}
	return nil
}

func (m *InitiateFileUploadResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*GetQuotaRequest)(nil), "cs3.gatewayv0alpha.GetQuotaRequest")
	proto.RegisterType((*ListRecycleRequest)(nil), "cs3.gatewayv0alpha.ListRecycleRequest")
	proto.RegisterType((*ListRecycleStreamRequest)(nil), "cs3.gatewayv0alpha.ListRecycleStreamRequest")
	proto.RegisterType((*PurgeRecycleRequest)(nil), "cs3.gatewayv0alpha.PurgeRecycleRequest")
	proto.RegisterType((*InitiateFileDownloadResponse)(nil), "cs3.gatewayv0alpha.InitiateFileDownloadResponse")
	proto.RegisterType((*InitiateFileUploadResponse)(nil), "cs3.gatewayv0alpha.InitiateFileUploadResponse")
}

func init() { proto.RegisterFile("cs3/gateway/v0alpha/gateway.proto", fileDescriptor_abc3eb7237c57d7d) }

var fileDescriptor_abc3eb7237c57d7d = []byte{
	// 1602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x5d, 0x6f, 0xdc, 0x44,
	0x17, 0x96, 0xd3, 0x76, 0xdb, 0x4e, 0xda, 0x7c, 0x4c, 0xd2, 0x2a, 0xca, 0xfb, 0xea, 0x7d, 0x4b,
	0x10, 0x6d, 0x42, 0xda, 0x4d, 0x9a, 0x34, 0x4d, 0x53, 0xe0, 0x22, 0x49, 0xe9, 0x2a, 0x2a, 0x55,
	0xc3, 0x26, 0x69, 0x01, 0x15, 0x45, 0x8e, 0xf7, 0x24, 0x6b, 0x75, 0xd7, 0x76, 0x67, 0xc6, 0x5b,
	0x16, 0x84, 0x10, 0x42, 0x88, 0xc2, 0x05, 0x08, 0x09, 0xf1, 0x03, 0xb8, 0xe4, 0xa7, 0x20, 0x71,
	0xc3, 0x15, 0x3f, 0x80, 0x1f, 0x82, 0xec, 0x39, 0x63, 0xcf, 0xec, 0x3a, 0x5e, 0x3b, 0x12, 0xbd,
	0xe0, 0x26, 0x52, 0xe6, 0x3c, 0xcf, 0x79, 0x9e, 0xf9, 0xf0, 0x99, 0x8f, 0x25, 0xaf, 0x39, 0x7c,
	0x79, 0xe1, 0xc8, 0x16, 0xf0, 0xc2, 0xee, 0x2e, 0x74, 0x16, 0xed, 0x56, 0xd0, 0xb4, 0xd5, 0xff,
	0xd5, 0x80, 0xf9, 0xc2, 0xa7, 0xd4, 0xe1, 0xcb, 0x55, 0x6c, 0x42, 0xc4, 0xf4, 0x5c, 0x44, 0xb3,
	0x83, 0x80, 0xc1, 0x91, 0xcb, 0x05, 0x4b, 0xa9, 0x5a, 0x9b, 0xa4, 0x4f, 0xff, 0x27, 0x86, 0x86,
	0xa2, 0x99, 0x62, 0x42, 0xd1, 0xc4, 0xe0, 0x72, 0x14, 0xf4, 0x9d, 0x36, 0x6f, 0xda, 0x0c, 0x02,
	0xe6, 0x77, 0xdc, 0x06, 0xb0, 0x04, 0xd8, 0x1b, 0x40, 0x52, 0x2c, 0x1e, 0x30, 0x38, 0x04, 0x06,
	0x9e, 0x03, 0x3c, 0xc1, 0x6b, 0x6d, 0x08, 0x5d, 0x8b, 0xa1, 0xe1, 0x41, 0xcb, 0x75, 0xb2, 0x25,
	0x32, 0x62, 0x48, 0x9d, 0x8c, 0xa8, 0x2c, 0x70, 0x16, 0xb8, 0xb0, 0x45, 0xa8, 0x12, 0xce, 0x47,
	0xad, 0x5c, 0xf8, 0xcc, 0x3e, 0xea, 0x4f, 0xc6, 0x80, 0xfb, 0x21, 0x4b, 0xd5, 0x6f, 0xe6, 0x81,
	0x7b, 0xda, 0x91, 0x72, 0x29, 0xa2, 0x88, 0x6e, 0x00, 0x5c, 0xfe, 0xd5, 0x65, 0x43, 0x0e, 0xac,
	0x2f, 0x8d, 0xde, 0x88, 0xe0, 0x15, 0x05, 0xce, 0xee, 0x72, 0x5f, 0x44, 0xd2, 0x66, 0x42, 0x32,
	0x5a, 0x03, 0xf1, 0x7e, 0xe8, 0x0b, 0xbb, 0x0e, 0xcf, 0x43, 0xe0, 0x82, 0xce, 0x91, 0x8a, 0x1f,
	0xd8, 0xcf, 0x43, 0x98, 0xb2, 0xae, 0x58, 0xb3, 0xc3, 0x4b, 0xe3, 0xd5, 0x68, 0x2d, 0x48, 0x63,
	0x8f, 0xe2, 0x40, 0x1d, 0x01, 0x74, 0x95, 0x9c, 0x62, 0x70, 0x38, 0x35, 0x14, 0xe3, 0xde, 0x88,
	0x71, 0x3d, 0x3d, 0x44, 0xfd, 0x6a, 0x5d, 0x4d, 0x52, 0x3d, 0x62, 0xcc, 0xfc, 0x61, 0x11, 0xfa,
	0x9e, 0xcb, 0x45, 0x1d, 0x9c, 0xae, 0xd3, 0x82, 0x57, 0x28, 0x4d, 0x6f, 0x90, 0xb3, 0x87, 0xcc,
	0x6f, 0xef, 0x0b, 0x3e, 0x75, 0x2a, 0x26, 0x4f, 0x6a, 0x22, 0xbb, 0x6e, 0x1b, 0xb8, 0xb0, 0xdb,
	0x41, 0xbd, 0x12, 0x81, 0x76, 0x39, 0x9d, 0x23, 0x67, 0x84, 0x1f, 0x81, 0x4f, 0xe7, 0x80, 0x4f,
	0x0b, 0x7f, 0x97, 0xcf, 0xfc, 0x69, 0x91, 0x29, 0xad, 0x53, 0x3b, 0x82, 0x81, 0xdd, 0xfe, 0x77,
	0x74, 0xad, 0x4b, 0x26, 0xb6, 0x43, 0x76, 0x04, 0xaf, 0x7e, 0xbe, 0x66, 0x7e, 0xb7, 0xc8, 0x7f,
	0xb7, 0x3c, 0x57, 0xb8, 0xb6, 0x80, 0xfb, 0x6e, 0x0b, 0xee, 0xf9, 0x2f, 0xbc, 0x96, 0x6f, 0x37,
	0xea, 0xc0, 0x03, 0xdf, 0xe3, 0x40, 0xaf, 0x91, 0x8a, 0xfc, 0x5a, 0xd1, 0xc4, 0x68, 0x9c, 0x9c,
	0x05, 0x4e, 0x75, 0x27, 0x6e, 0xae, 0x63, 0x58, 0x73, 0x3b, 0x34, 0xc8, 0xed, 0x3c, 0x19, 0x6f,
	0xa0, 0xce, 0x3e, 0x78, 0x8d, 0xc0, 0x77, 0x3d, 0x11, 0x8f, 0xe9, 0xf9, 0xfa, 0x98, 0x0a, 0xbc,
	0x8b, 0xed, 0xf4, 0x32, 0xa9, 0xc0, 0x27, 0x81, 0xcf, 0x61, 0xea, 0xcc, 0x15, 0x6b, 0xf6, 0x5c,
	0x1d, 0xff, 0xa3, 0x93, 0xd1, 0xf8, 0x3e, 0x03, 0x6f, 0xaa, 0x12, 0x13, 0xe5, 0x3f, 0x33, 0x3f,
	0x0f, 0x91, 0x69, 0xbd, 0x3f, 0x7b, 0xc1, 0x3f, 0xde, 0x9b, 0x6b, 0x64, 0x34, 0x0c, 0xb2, 0xfa,
	0x32, 0x22, 0x9b, 0x93, 0x9e, 0x00, 0x99, 0xb0, 0x3b, 0xb6, 0xdb, 0xb2, 0x0f, 0x5a, 0xb0, 0xef,
	0x34, 0xc1, 0x79, 0xc6, 0xc3, 0x76, 0xb4, 0x3e, 0x4e, 0xcd, 0x0e, 0x2f, 0xdd, 0xca, 0x9f, 0x34,
	0x59, 0x05, 0x37, 0x91, 0xb4, 0xcd, 0x5c, 0x9f, 0xb9, 0xa2, 0x5b, 0xa7, 0x49, 0x42, 0x15, 0xe2,
	0xe9, 0xc0, 0x9c, 0xd1, 0x06, 0x66, 0xe9, 0xaf, 0x1b, 0x64, 0xa4, 0x26, 0x77, 0x9c, 0x1d, 0x60,
	0x1d, 0xd7, 0x01, 0x1a, 0x90, 0x89, 0x1a, 0x78, 0xc0, 0x6c, 0x01, 0xeb, 0x8e, 0x03, 0x9c, 0xef,
	0x46, 0x48, 0x3a, 0x1f, 0x3b, 0x89, 0x76, 0x14, 0x25, 0x9f, 0x81, 0xc2, 0x35, 0x3a, 0x7d, 0xbd,
	0x18, 0x18, 0x87, 0x7f, 0x8b, 0x54, 0x9e, 0x34, 0xfd, 0xf5, 0xf6, 0x16, 0xfd, 0x5f, 0x1f, 0x4f,
	0x06, 0x54, 0xde, 0xff, 0x1f, 0x1b, 0xc7, 0x54, 0x9f, 0x92, 0xd1, 0x4d, 0x06, 0xb6, 0x80, 0x4d,
	0xdf, 0x13, 0xb6, 0xeb, 0x01, 0xa3, 0x4b, 0x79, 0x43, 0xd8, 0x03, 0x56, 0x3a, 0xcb, 0xa5, 0x38,
	0xa8, 0xbd, 0x4f, 0x2a, 0xf7, 0xa0, 0x05, 0x02, 0xe8, 0x5c, 0x1e, 0x5d, 0x62, 0x94, 0xd2, 0x9b,
	0x45, 0xa0, 0x28, 0x70, 0x40, 0xce, 0xd6, 0x40, 0x6c, 0xdb, 0xa2, 0x49, 0x73, 0x69, 0x08, 0x52,
	0x12, 0xf3, 0x85, 0xb0, 0xa8, 0xf1, 0x31, 0x39, 0xa7, 0xf6, 0x26, 0xfa, 0x7a, 0xb5, 0xff, 0x40,
	0x52, 0xed, 0xd9, 0xb9, 0x70, 0xaa, 0x8f, 0xcf, 0x8e, 0x60, 0x4c, 0xff, 0xa5, 0x45, 0x26, 0xb3,
	0x0a, 0x0b, 0x5d, 0xcd, 0x4b, 0x93, 0x5d, 0x8a, 0xa4, 0xfe, 0x62, 0x96, 0xc9, 0xdc, 0xda, 0xf5,
	0x19, 0xa1, 0xfd, 0xb5, 0x80, 0xae, 0x14, 0x35, 0xa0, 0x6a, 0x87, 0x94, 0xaf, 0x0e, 0x92, 0xef,
	0x29, 0x35, 0x2f, 0x2d, 0x32, 0x11, 0xed, 0x57, 0xc9, 0xf2, 0x91, 0x3b, 0x16, 0xbd, 0x9d, 0x27,
	0x9f, 0x41, 0x50, 0xfa, 0xab, 0xa5, 0x79, 0xd2, 0xc8, 0xa2, 0x45, 0x05, 0xb9, 0x68, 0x00, 0xe8,
	0x62, 0xe1, 0x5c, 0x4a, 0xfd, 0x66, 0x09, 0x06, 0x0e, 0xc0, 0xe7, 0x64, 0x2c, 0x0a, 0x44, 0x43,
	0xf3, 0x18, 0x18, 0x77, 0x7d, 0x8f, 0xd3, 0xe5, 0x41, 0x69, 0x74, 0xb4, 0xd2, 0xbe, 0x55, 0x8e,
	0x94, 0x14, 0x88, 0xf1, 0xbe, 0xe3, 0x02, 0xbd, 0x9e, 0x35, 0x89, 0xc7, 0x9d, 0x2a, 0xa6, 0x57,
	0x06, 0x09, 0xf7, 0xb0, 0x92, 0x01, 0x3f, 0x24, 0xc3, 0x5a, 0x98, 0x5e, 0x1d, 0xa0, 0xaa, 0xf4,
	0x16, 0x0a, 0xea, 0x25, 0x7d, 0xfc, 0x90, 0x9c, 0x7e, 0xe8, 0x77, 0x80, 0x5e, 0xcb, 0x23, 0x46,
	0x08, 0xa5, 0x30, 0x3b, 0x18, 0x88, 0xa9, 0x5d, 0x72, 0x41, 0x3f, 0x93, 0xa0, 0x44, 0x4f, 0x1f,
	0x32, 0x4e, 0x2d, 0xd3, 0xb9, 0x6b, 0xcb, 0x24, 0xa0, 0xd4, 0x57, 0x16, 0xa1, 0x75, 0x88, 0x18,
	0xa0, 0xcd, 0x64, 0xfe, 0x77, 0xda, 0x8f, 0x57, 0xfa, 0xb7, 0xcb, 0xd2, 0xfa, 0x5d, 0xa0, 0xc1,
	0x2d, 0x01, 0xed, 0x42, 0x2e, 0x34, 0x7c, 0x19, 0x17, 0x06, 0x2d, 0x9d, 0xd1, 0xe8, 0x24, 0x92,
	0x3f, 0xa3, 0x11, 0xa2, 0xd0, 0x8c, 0x4a, 0x20, 0xa6, 0xfe, 0xd6, 0x22, 0x93, 0x3b, 0x20, 0xd6,
	0xd9, 0x81, 0x2b, 0x98, 0xcd, 0xba, 0x0f, 0x41, 0xd8, 0x0d, 0x5b, 0xd8, 0xf9, 0x15, 0x39, 0x8b,
	0xa1, 0xb4, 0xef, 0x94, 0x27, 0xa2, 0x97, 0x1f, 0x2c, 0x72, 0x79, 0xcf, 0xe3, 0x59, 0x6e, 0xd6,
	0xf2, 0x92, 0x66, 0x73, 0x94, 0x9f, 0xbb, 0x27, 0xa1, 0xa2, 0x23, 0x46, 0x86, 0xe5, 0x76, 0xbf,
	0x13, 0xdd, 0xe3, 0xb0, 0x42, 0xf6, 0xdd, 0xeb, 0xcc, 0x93, 0x41, 0x0c, 0x35, 0x2b, 0x64, 0x31,
	0x46, 0xaa, 0x59, 0x87, 0xb6, 0xdf, 0x29, 0xa6, 0xa9, 0x41, 0x0b, 0x6a, 0x1a, 0x8c, 0xe4, 0xbb,
	0x8e, 0xb6, 0x7d, 0x29, 0x78, 0x23, 0x9f, 0xae, 0x70, 0xe6, 0x0e, 0x58, 0x00, 0x8e, 0x52, 0x3e,
	0x21, 0x51, 0xd1, 0x8a, 0x1b, 0x39, 0x5d, 0xc8, 0x67, 0xa7, 0x48, 0xb3, 0x90, 0x14, 0x22, 0xa4,
	0xe3, 0xb9, 0x17, 0x34, 0x8a, 0xce, 0xa1, 0x06, 0x2d, 0x38, 0x9e, 0x06, 0x03, 0x35, 0xbf, 0x49,
	0xef, 0xda, 0xe0, 0x76, 0xa0, 0x81, 0xbd, 0x5d, 0x1d, 0x6c, 0xde, 0x64, 0x98, 0xdf, 0x54, 0x29,
	0x22, 0x3a, 0xf9, 0xce, 0x22, 0x13, 0xd2, 0xa1, 0x01, 0xa0, 0x77, 0x8a, 0x74, 0xca, 0xa0, 0x28,
	0x2f, 0x6b, 0x27, 0x60, 0xa6, 0xc7, 0xbf, 0xb1, 0x1a, 0x98, 0x56, 0xb1, 0x96, 0xe6, 0x2d, 0xa0,
	0x4c, 0x1b, 0xb7, 0xcb, 0xd2, 0xd0, 0xc3, 0x13, 0x52, 0xd9, 0x01, 0xf1, 0x00, 0xba, 0x54, 0xde,
	0x88, 0xb5, 0xb7, 0x2c, 0xad, 0x48, 0x3d, 0x80, 0xae, 0x12, 0xba, 0x3a, 0x08, 0x96, 0x26, 0xae,
	0x0d, 0x48, 0x5c, 0x2b, 0x96, 0xb8, 0x66, 0x26, 0x7e, 0x69, 0x91, 0x71, 0x59, 0x28, 0xb6, 0xe3,
	0x47, 0x34, 0x7d, 0x02, 0x33, 0x9e, 0xd5, 0xcc, 0xda, 0xa2, 0x51, 0xcc, 0x09, 0x2c, 0xc7, 0xd4,
	0xac, 0xc8, 0xfa, 0x51, 0xca, 0x4a, 0x1f, 0xa5, 0xb0, 0x95, 0x0c, 0x26, 0x5a, 0xf9, 0x82, 0x8c,
	0x44, 0x97, 0x17, 0xcd, 0xc6, 0xca, 0xa0, 0x64, 0x26, 0xde, 0x5c, 0x48, 0x25, 0x68, 0x68, 0xe0,
	0x27, 0x8b, 0x5c, 0x32, 0x43, 0x1b, 0x5d, 0x79, 0x57, 0x7e, 0xbb, 0x5c, 0x46, 0xa4, 0x29, 0x3f,
	0xef, 0x9c, 0x90, 0x8d, 0xb6, 0xbe, 0xb6, 0xe4, 0x09, 0x5b, 0x83, 0xa8, 0xc2, 0x93, 0x93, 0xb3,
	0x97, 0x61, 0x16, 0x9e, 0x52, 0x44, 0x6d, 0xa9, 0xc8, 0x5a, 0x50, 0x6a, 0xa9, 0xf4, 0x51, 0x0a,
	0x2f, 0x95, 0x0c, 0x26, 0x5a, 0xe9, 0x92, 0x11, 0xb9, 0xa4, 0x1f, 0x6d, 0x3e, 0x94, 0x36, 0xe4,
	0xa3, 0x40, 0xef, 0xb3, 0xb7, 0xb9, 0xfe, 0x15, 0xd8, 0x7c, 0x14, 0x28, 0xca, 0x49, 0xa5, 0xe5,
	0x12, 0x2e, 0x28, 0x6d, 0x82, 0x8b, 0x49, 0xf7, 0x72, 0x50, 0x3a, 0x20, 0xc3, 0x35, 0x10, 0x89,
	0xee, 0x42, 0x6e, 0x0e, 0x0d, 0x69, 0xee, 0xb4, 0x85, 0x08, 0xa8, 0xd8, 0x91, 0x37, 0x4a, 0xd5,
	0xce, 0xe9, 0xcd, 0xdc, 0x14, 0x06, 0x56, 0xa9, 0x2e, 0x95, 0xa1, 0xa4, 0x83, 0x2c, 0x27, 0xbf,
	0xe0, 0x20, 0x9b, 0xe0, 0x62, 0x83, 0xdc, 0xcb, 0x41, 0xe9, 0xef, 0x2d, 0x72, 0x49, 0xdf, 0x7d,
	0xd3, 0xbe, 0xaf, 0x0d, 0xec, 0x48, 0x1f, 0xc7, 0x3c, 0xb1, 0x96, 0xa4, 0xa2, 0xa1, 0x1f, 0xa3,
	0x33, 0xb4, 0xb1, 0x05, 0x27, 0x83, 0x72, 0xb7, 0x40, 0x07, 0x7b, 0x49, 0xca, 0xd2, 0x5b, 0x27,
	0xe2, 0x26, 0x27, 0xb0, 0xd1, 0x1a, 0x88, 0xf5, 0x20, 0xd8, 0x46, 0x1e, 0xa7, 0xf2, 0xd4, 0xa8,
	0xfd, 0x88, 0xa5, 0xad, 0x2b, 0x1d, 0x68, 0x5e, 0x82, 0x8b, 0xe0, 0x51, 0x33, 0x94, 0x55, 0xd0,
	0x10, 0x3d, 0x36, 0x49, 0x2f, 0xd2, 0xfc, 0x04, 0x0a, 0x11, 0x50, 0xf6, 0x69, 0xfc, 0x46, 0xb7,
	0xc7, 0x81, 0xe1, 0x65, 0x4d, 0xff, 0xd9, 0x48, 0xf3, 0x1c, 0x21, 0xcc, 0xcb, 0x5a, 0x2e, 0x10,
	0xb3, 0x7b, 0xe4, 0x22, 0x36, 0xd5, 0x98, 0x1f, 0x06, 0x5c, 0x3b, 0xab, 0x1f, 0x43, 0x95, 0xb8,
	0xfe, 0xb3, 0xfa, 0x00, 0x78, 0xf2, 0xe2, 0x78, 0x7e, 0x8b, 0x6f, 0x79, 0x71, 0x2b, 0xbe, 0x6a,
	0x66, 0x91, 0x13, 0x8c, 0xf9, 0xaa, 0x39, 0x00, 0x9a, 0x6a, 0xdc, 0x77, 0xbd, 0x46, 0xa4, 0xce,
	0x73, 0x34, 0x12, 0xcc, 0x60, 0x0d, 0x0d, 0x2a, 0x35, 0x36, 0xda, 0xe4, 0xb2, 0xe3, 0xb7, 0x33,
	0xde, 0x2a, 0x36, 0x2e, 0xe0, 0xeb, 0xf7, 0x36, 0xf3, 0x85, 0xbf, 0x6d, 0x7d, 0x34, 0x66, 0xc6,
	0x83, 0x83, 0x5f, 0x86, 0x2a, 0x9b, 0x1b, 0x8f, 0x3e, 0x58, 0xdf, 0xf8, 0x75, 0x88, 0x6e, 0xee,
	0x2c, 0x57, 0x11, 0xff, 0x78, 0x71, 0x3d, 0x8a, 0xff, 0x16, 0x37, 0x3e, 0x35, 0x1b, 0x0f, 0x2a,
	0xf1, 0xef, 0x7c, 0xcb, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x32, 0x10, 0x3c, 0x08, 0xf4, 0x1d,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayServiceClient interface {
	// *****************************************************************/
	// ************************ AUTH ******** **************************/
	// *****************************************************************/
	GenerateAccessToken(ctx context.Context, in *v0alpha1.GenerateAccessTokenRequest, opts ...grpc.CallOption) (*v0alpha1.GenerateAccessTokenResponse, error)
	WhoAmI(ctx context.Context, in *v0alpha1.WhoAmIRequest, opts ...grpc.CallOption) (*v0alpha1.WhoAmIResponse, error)
	// *****************************************************************/
	// ************************ STORAGE PROVIDER ***********************/
	// *****************************************************************/
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(ctx context.Context, in *v0alpha.CreateContainerRequest, opts ...grpc.CallOption) (*v0alpha.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(ctx context.Context, in *v0alpha.DeleteRequest, opts ...grpc.CallOption) (*v0alpha.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(ctx context.Context, in *v0alpha.GetPathRequest, opts ...grpc.CallOption) (*v0alpha.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*v0alpha.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(ctx context.Context, in *v0alpha.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(ctx context.Context, in *v0alpha.InitiateFileUploadRequest, opts ...grpc.CallOption) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(ctx context.Context, in *v0alpha.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayService_ListContainerStreamClient, error)
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(ctx context.Context, in *v0alpha.ListContainerRequest, opts ...grpc.CallOption) (*v0alpha.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(ctx context.Context, in *v0alpha.ListFileVersionsRequest, opts ...grpc.CallOption) (*v0alpha.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayService_ListRecycleStreamClient, error)
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*v0alpha.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(ctx context.Context, in *v0alpha.MoveRequest, opts ...grpc.CallOption) (*v0alpha.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...grpc.CallOption) (*v0alpha.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(ctx context.Context, in *v0alpha.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v0alpha.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(ctx context.Context, in *v0alpha.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v0alpha.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(ctx context.Context, in *v0alpha.StatRequest, opts ...grpc.CallOption) (*v0alpha.StatResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageproviderv0alpha.ResourceInfo.
	SetArbitraryMetadata(ctx context.Context, in *v0alpha.SetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v0alpha.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageproviderv0alpha.ResourceInfo.
	UnsetArbitraryMetadata(ctx context.Context, in *v0alpha.UnsetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v0alpha.UnsetArbitraryMetadataResponse, error)
	// *****************************************************************/
	// ************************ USER SHARE PROVIDER ********************/
	// *****************************************************************/
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *v0alpha2.CreateShareRequest, opts ...grpc.CallOption) (*v0alpha2.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *v0alpha2.RemoveShareRequest, opts ...grpc.CallOption) (*v0alpha2.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *v0alpha2.GetShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *v0alpha2.ListSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *v0alpha2.UpdateShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(ctx context.Context, in *v0alpha2.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *v0alpha2.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *v0alpha2.GetReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetReceivedShareResponse, error)
	// *****************************************************************/
	// ************************ PREFERENCES ***************************/
	// *****************************************************************/
	// Maps the key-value pair.
	SetKey(ctx context.Context, in *v0alpha3.SetKeyRequest, opts ...grpc.CallOption) (*v0alpha3.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(ctx context.Context, in *v0alpha3.GetKeyRequest, opts ...grpc.CallOption) (*v0alpha3.GetKeyResponse, error)
	// *****************************************************************/
	// ************************ PUBLIC SHARE ***************************/
	// *****************************************************************/
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(ctx context.Context, in *v0alpha4.CreatePublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(ctx context.Context, in *v0alpha4.RemovePublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(ctx context.Context, in *v0alpha4.GetPublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(ctx context.Context, in *v0alpha4.GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*v0alpha4.GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(ctx context.Context, in *v0alpha4.ListPublicSharesRequest, opts ...grpc.CallOption) (*v0alpha4.ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(ctx context.Context, in *v0alpha4.UpdatePublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.UpdatePublicShareResponse, error)
	// *****************************************************************/
	// ************************ OCM SHARE PROVIDER *********************/
	// *****************************************************************/
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(ctx context.Context, in *v0alpha5.CreateOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(ctx context.Context, in *v0alpha5.RemoveOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(ctx context.Context, in *v0alpha5.GetOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.GetOCMShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(ctx context.Context, in *v0alpha5.ListOCMSharesRequest, opts ...grpc.CallOption) (*v0alpha5.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(ctx context.Context, in *v0alpha5.UpdateOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.UpdateOCMShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedOCMShares(ctx context.Context, in *v0alpha5.ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*v0alpha5.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(ctx context.Context, in *v0alpha5.UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.UpdateReceivedOCMShareResponse, error)
	// *****************************************************************/
	// ************************ APP REGISTRY ****************************/
	// *****************************************************************/
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(ctx context.Context, in *v0alpha6.GetAppProvidersRequest, opts ...grpc.CallOption) (*v0alpha6.GetAppProvidersResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(ctx context.Context, in *v0alpha6.ListAppProvidersRequest, opts ...grpc.CallOption) (*v0alpha6.ListAppProvidersResponse, error)
	// *****************************************************************/
	// ************************ USER PROVIDER **************************/
	// *****************************************************************/
	// Gets the information about an user by its user id.
	GetUser(ctx context.Context, in *v0alpha7.GetUserRequest, opts ...grpc.CallOption) (*v0alpha7.GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *v0alpha7.GetUserGroupsRequest, opts ...grpc.CallOption) (*v0alpha7.GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(ctx context.Context, in *v0alpha7.IsInGroupRequest, opts ...grpc.CallOption) (*v0alpha7.IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *v0alpha7.FindUsersRequest, opts ...grpc.CallOption) (*v0alpha7.FindUsersResponse, error)
}

type gatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewGatewayServiceClient(cc *grpc.ClientConn) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) GenerateAccessToken(ctx context.Context, in *v0alpha1.GenerateAccessTokenRequest, opts ...grpc.CallOption) (*v0alpha1.GenerateAccessTokenResponse, error) {
	out := new(v0alpha1.GenerateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GenerateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) WhoAmI(ctx context.Context, in *v0alpha1.WhoAmIRequest, opts ...grpc.CallOption) (*v0alpha1.WhoAmIResponse, error) {
	out := new(v0alpha1.WhoAmIResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateContainer(ctx context.Context, in *v0alpha.CreateContainerRequest, opts ...grpc.CallOption) (*v0alpha.CreateContainerResponse, error) {
	out := new(v0alpha.CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Delete(ctx context.Context, in *v0alpha.DeleteRequest, opts ...grpc.CallOption) (*v0alpha.DeleteResponse, error) {
	out := new(v0alpha.DeleteResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetPath(ctx context.Context, in *v0alpha.GetPathRequest, opts ...grpc.CallOption) (*v0alpha.GetPathResponse, error) {
	out := new(v0alpha.GetPathResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*v0alpha.GetQuotaResponse, error) {
	out := new(v0alpha.GetQuotaResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InitiateFileDownload(ctx context.Context, in *v0alpha.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*InitiateFileDownloadResponse, error) {
	out := new(InitiateFileDownloadResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/InitiateFileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InitiateFileUpload(ctx context.Context, in *v0alpha.InitiateFileUploadRequest, opts ...grpc.CallOption) (*InitiateFileUploadResponse, error) {
	out := new(InitiateFileUploadResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/InitiateFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListContainerStream(ctx context.Context, in *v0alpha.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayService_ListContainerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayService_serviceDesc.Streams[0], "/cs3.gatewayv0alpha.GatewayService/ListContainerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceListContainerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_ListContainerStreamClient interface {
	Recv() (*v0alpha.ListContainerStreamResponse, error)
	grpc.ClientStream
}

type gatewayServiceListContainerStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceListContainerStreamClient) Recv() (*v0alpha.ListContainerStreamResponse, error) {
	m := new(v0alpha.ListContainerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) ListContainer(ctx context.Context, in *v0alpha.ListContainerRequest, opts ...grpc.CallOption) (*v0alpha.ListContainerResponse, error) {
	out := new(v0alpha.ListContainerResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListFileVersions(ctx context.Context, in *v0alpha.ListFileVersionsRequest, opts ...grpc.CallOption) (*v0alpha.ListFileVersionsResponse, error) {
	out := new(v0alpha.ListFileVersionsResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListFileVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayService_ListRecycleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayService_serviceDesc.Streams[1], "/cs3.gatewayv0alpha.GatewayService/ListRecycleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceListRecycleStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_ListRecycleStreamClient interface {
	Recv() (*v0alpha.ListRecycleStreamResponse, error)
	grpc.ClientStream
}

type gatewayServiceListRecycleStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceListRecycleStreamClient) Recv() (*v0alpha.ListRecycleStreamResponse, error) {
	m := new(v0alpha.ListRecycleStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*v0alpha.ListRecycleResponse, error) {
	out := new(v0alpha.ListRecycleResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Move(ctx context.Context, in *v0alpha.MoveRequest, opts ...grpc.CallOption) (*v0alpha.MoveResponse, error) {
	out := new(v0alpha.MoveResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...grpc.CallOption) (*v0alpha.PurgeRecycleResponse, error) {
	out := new(v0alpha.PurgeRecycleResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/PurgeRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RestoreFileVersion(ctx context.Context, in *v0alpha.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v0alpha.RestoreFileVersionResponse, error) {
	out := new(v0alpha.RestoreFileVersionResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RestoreFileVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RestoreRecycleItem(ctx context.Context, in *v0alpha.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v0alpha.RestoreRecycleItemResponse, error) {
	out := new(v0alpha.RestoreRecycleItemResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RestoreRecycleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Stat(ctx context.Context, in *v0alpha.StatRequest, opts ...grpc.CallOption) (*v0alpha.StatResponse, error) {
	out := new(v0alpha.StatResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SetArbitraryMetadata(ctx context.Context, in *v0alpha.SetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v0alpha.SetArbitraryMetadataResponse, error) {
	out := new(v0alpha.SetArbitraryMetadataResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/SetArbitraryMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UnsetArbitraryMetadata(ctx context.Context, in *v0alpha.UnsetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v0alpha.UnsetArbitraryMetadataResponse, error) {
	out := new(v0alpha.UnsetArbitraryMetadataResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UnsetArbitraryMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateShare(ctx context.Context, in *v0alpha2.CreateShareRequest, opts ...grpc.CallOption) (*v0alpha2.CreateShareResponse, error) {
	out := new(v0alpha2.CreateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/CreateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveShare(ctx context.Context, in *v0alpha2.RemoveShareRequest, opts ...grpc.CallOption) (*v0alpha2.RemoveShareResponse, error) {
	out := new(v0alpha2.RemoveShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RemoveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetShare(ctx context.Context, in *v0alpha2.GetShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetShareResponse, error) {
	out := new(v0alpha2.GetShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListShares(ctx context.Context, in *v0alpha2.ListSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListSharesResponse, error) {
	out := new(v0alpha2.ListSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateShare(ctx context.Context, in *v0alpha2.UpdateShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateShareResponse, error) {
	out := new(v0alpha2.UpdateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListReceivedShares(ctx context.Context, in *v0alpha2.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListReceivedSharesResponse, error) {
	out := new(v0alpha2.ListReceivedSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListReceivedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateReceivedShare(ctx context.Context, in *v0alpha2.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateReceivedShareResponse, error) {
	out := new(v0alpha2.UpdateReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdateReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetReceivedShare(ctx context.Context, in *v0alpha2.GetReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetReceivedShareResponse, error) {
	out := new(v0alpha2.GetReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SetKey(ctx context.Context, in *v0alpha3.SetKeyRequest, opts ...grpc.CallOption) (*v0alpha3.SetKeyResponse, error) {
	out := new(v0alpha3.SetKeyResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/SetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetKey(ctx context.Context, in *v0alpha3.GetKeyRequest, opts ...grpc.CallOption) (*v0alpha3.GetKeyResponse, error) {
	out := new(v0alpha3.GetKeyResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreatePublicShare(ctx context.Context, in *v0alpha4.CreatePublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.CreatePublicShareResponse, error) {
	out := new(v0alpha4.CreatePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/CreatePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemovePublicShare(ctx context.Context, in *v0alpha4.RemovePublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.RemovePublicShareResponse, error) {
	out := new(v0alpha4.RemovePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RemovePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetPublicShare(ctx context.Context, in *v0alpha4.GetPublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.GetPublicShareResponse, error) {
	out := new(v0alpha4.GetPublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetPublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetPublicShareByToken(ctx context.Context, in *v0alpha4.GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*v0alpha4.GetPublicShareByTokenResponse, error) {
	out := new(v0alpha4.GetPublicShareByTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetPublicShareByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListPublicShares(ctx context.Context, in *v0alpha4.ListPublicSharesRequest, opts ...grpc.CallOption) (*v0alpha4.ListPublicSharesResponse, error) {
	out := new(v0alpha4.ListPublicSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListPublicShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdatePublicShare(ctx context.Context, in *v0alpha4.UpdatePublicShareRequest, opts ...grpc.CallOption) (*v0alpha4.UpdatePublicShareResponse, error) {
	out := new(v0alpha4.UpdatePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdatePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateOCMShare(ctx context.Context, in *v0alpha5.CreateOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.CreateOCMShareResponse, error) {
	out := new(v0alpha5.CreateOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/CreateOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveOCMShare(ctx context.Context, in *v0alpha5.RemoveOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.RemoveOCMShareResponse, error) {
	out := new(v0alpha5.RemoveOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RemoveOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetOCMShare(ctx context.Context, in *v0alpha5.GetOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.GetOCMShareResponse, error) {
	out := new(v0alpha5.GetOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListOCMShares(ctx context.Context, in *v0alpha5.ListOCMSharesRequest, opts ...grpc.CallOption) (*v0alpha5.ListOCMSharesResponse, error) {
	out := new(v0alpha5.ListOCMSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListOCMShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateOCMShare(ctx context.Context, in *v0alpha5.UpdateOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.UpdateOCMShareResponse, error) {
	out := new(v0alpha5.UpdateOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdateOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListReceivedOCMShares(ctx context.Context, in *v0alpha5.ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*v0alpha5.ListReceivedOCMSharesResponse, error) {
	out := new(v0alpha5.ListReceivedOCMSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListReceivedOCMShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateReceivedOCMShare(ctx context.Context, in *v0alpha5.UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*v0alpha5.UpdateReceivedOCMShareResponse, error) {
	out := new(v0alpha5.UpdateReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdateReceivedOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetAppProviders(ctx context.Context, in *v0alpha6.GetAppProvidersRequest, opts ...grpc.CallOption) (*v0alpha6.GetAppProvidersResponse, error) {
	out := new(v0alpha6.GetAppProvidersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetAppProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListAppProviders(ctx context.Context, in *v0alpha6.ListAppProvidersRequest, opts ...grpc.CallOption) (*v0alpha6.ListAppProvidersResponse, error) {
	out := new(v0alpha6.ListAppProvidersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListAppProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUser(ctx context.Context, in *v0alpha7.GetUserRequest, opts ...grpc.CallOption) (*v0alpha7.GetUserResponse, error) {
	out := new(v0alpha7.GetUserResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserGroups(ctx context.Context, in *v0alpha7.GetUserGroupsRequest, opts ...grpc.CallOption) (*v0alpha7.GetUserGroupsResponse, error) {
	out := new(v0alpha7.GetUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) IsInGroup(ctx context.Context, in *v0alpha7.IsInGroupRequest, opts ...grpc.CallOption) (*v0alpha7.IsInGroupResponse, error) {
	out := new(v0alpha7.IsInGroupResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/IsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) FindUsers(ctx context.Context, in *v0alpha7.FindUsersRequest, opts ...grpc.CallOption) (*v0alpha7.FindUsersResponse, error) {
	out := new(v0alpha7.FindUsersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
type GatewayServiceServer interface {
	// *****************************************************************/
	// ************************ AUTH ******** **************************/
	// *****************************************************************/
	GenerateAccessToken(context.Context, *v0alpha1.GenerateAccessTokenRequest) (*v0alpha1.GenerateAccessTokenResponse, error)
	WhoAmI(context.Context, *v0alpha1.WhoAmIRequest) (*v0alpha1.WhoAmIResponse, error)
	// *****************************************************************/
	// ************************ STORAGE PROVIDER ***********************/
	// *****************************************************************/
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(context.Context, *v0alpha.CreateContainerRequest) (*v0alpha.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(context.Context, *v0alpha.DeleteRequest) (*v0alpha.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(context.Context, *v0alpha.GetPathRequest) (*v0alpha.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(context.Context, *GetQuotaRequest) (*v0alpha.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(context.Context, *v0alpha.InitiateFileDownloadRequest) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(context.Context, *v0alpha.InitiateFileUploadRequest) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(*v0alpha.ListContainerStreamRequest, GatewayService_ListContainerStreamServer) error
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(context.Context, *v0alpha.ListContainerRequest) (*v0alpha.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(context.Context, *v0alpha.ListFileVersionsRequest) (*v0alpha.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(*ListRecycleStreamRequest, GatewayService_ListRecycleStreamServer) error
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(context.Context, *ListRecycleRequest) (*v0alpha.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(context.Context, *v0alpha.MoveRequest) (*v0alpha.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(context.Context, *PurgeRecycleRequest) (*v0alpha.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(context.Context, *v0alpha.RestoreFileVersionRequest) (*v0alpha.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(context.Context, *v0alpha.RestoreRecycleItemRequest) (*v0alpha.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(context.Context, *v0alpha.StatRequest) (*v0alpha.StatResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageproviderv0alpha.ResourceInfo.
	SetArbitraryMetadata(context.Context, *v0alpha.SetArbitraryMetadataRequest) (*v0alpha.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storageproviderv0alpha.ResourceInfo.
	UnsetArbitraryMetadata(context.Context, *v0alpha.UnsetArbitraryMetadataRequest) (*v0alpha.UnsetArbitraryMetadataResponse, error)
	// *****************************************************************/
	// ************************ USER SHARE PROVIDER ********************/
	// *****************************************************************/
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *v0alpha2.CreateShareRequest) (*v0alpha2.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *v0alpha2.RemoveShareRequest) (*v0alpha2.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *v0alpha2.GetShareRequest) (*v0alpha2.GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *v0alpha2.ListSharesRequest) (*v0alpha2.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *v0alpha2.UpdateShareRequest) (*v0alpha2.UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(context.Context, *v0alpha2.ListReceivedSharesRequest) (*v0alpha2.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *v0alpha2.UpdateReceivedShareRequest) (*v0alpha2.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *v0alpha2.GetReceivedShareRequest) (*v0alpha2.GetReceivedShareResponse, error)
	// *****************************************************************/
	// ************************ PREFERENCES ***************************/
	// *****************************************************************/
	// Maps the key-value pair.
	SetKey(context.Context, *v0alpha3.SetKeyRequest) (*v0alpha3.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(context.Context, *v0alpha3.GetKeyRequest) (*v0alpha3.GetKeyResponse, error)
	// *****************************************************************/
	// ************************ PUBLIC SHARE ***************************/
	// *****************************************************************/
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(context.Context, *v0alpha4.CreatePublicShareRequest) (*v0alpha4.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(context.Context, *v0alpha4.RemovePublicShareRequest) (*v0alpha4.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(context.Context, *v0alpha4.GetPublicShareRequest) (*v0alpha4.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(context.Context, *v0alpha4.GetPublicShareByTokenRequest) (*v0alpha4.GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(context.Context, *v0alpha4.ListPublicSharesRequest) (*v0alpha4.ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(context.Context, *v0alpha4.UpdatePublicShareRequest) (*v0alpha4.UpdatePublicShareResponse, error)
	// *****************************************************************/
	// ************************ OCM SHARE PROVIDER *********************/
	// *****************************************************************/
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(context.Context, *v0alpha5.CreateOCMShareRequest) (*v0alpha5.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(context.Context, *v0alpha5.RemoveOCMShareRequest) (*v0alpha5.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(context.Context, *v0alpha5.GetOCMShareRequest) (*v0alpha5.GetOCMShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(context.Context, *v0alpha5.ListOCMSharesRequest) (*v0alpha5.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(context.Context, *v0alpha5.UpdateOCMShareRequest) (*v0alpha5.UpdateOCMShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedOCMShares(context.Context, *v0alpha5.ListReceivedOCMSharesRequest) (*v0alpha5.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(context.Context, *v0alpha5.UpdateReceivedOCMShareRequest) (*v0alpha5.UpdateReceivedOCMShareResponse, error)
	// *****************************************************************/
	// ************************ APP REGISTRY ****************************/
	// *****************************************************************/
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(context.Context, *v0alpha6.GetAppProvidersRequest) (*v0alpha6.GetAppProvidersResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(context.Context, *v0alpha6.ListAppProvidersRequest) (*v0alpha6.ListAppProvidersResponse, error)
	// *****************************************************************/
	// ************************ USER PROVIDER **************************/
	// *****************************************************************/
	// Gets the information about an user by its user id.
	GetUser(context.Context, *v0alpha7.GetUserRequest) (*v0alpha7.GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(context.Context, *v0alpha7.GetUserGroupsRequest) (*v0alpha7.GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(context.Context, *v0alpha7.IsInGroupRequest) (*v0alpha7.IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *v0alpha7.FindUsersRequest) (*v0alpha7.FindUsersResponse, error)
}

// UnimplementedGatewayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (*UnimplementedGatewayServiceServer) GenerateAccessToken(ctx context.Context, req *v0alpha1.GenerateAccessTokenRequest) (*v0alpha1.GenerateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessToken not implemented")
}
func (*UnimplementedGatewayServiceServer) WhoAmI(ctx context.Context, req *v0alpha1.WhoAmIRequest) (*v0alpha1.WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (*UnimplementedGatewayServiceServer) CreateContainer(ctx context.Context, req *v0alpha.CreateContainerRequest) (*v0alpha.CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedGatewayServiceServer) Delete(ctx context.Context, req *v0alpha.DeleteRequest) (*v0alpha.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGatewayServiceServer) GetPath(ctx context.Context, req *v0alpha.GetPathRequest) (*v0alpha.GetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}
func (*UnimplementedGatewayServiceServer) GetQuota(ctx context.Context, req *GetQuotaRequest) (*v0alpha.GetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (*UnimplementedGatewayServiceServer) InitiateFileDownload(ctx context.Context, req *v0alpha.InitiateFileDownloadRequest) (*InitiateFileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileDownload not implemented")
}
func (*UnimplementedGatewayServiceServer) InitiateFileUpload(ctx context.Context, req *v0alpha.InitiateFileUploadRequest) (*InitiateFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileUpload not implemented")
}
func (*UnimplementedGatewayServiceServer) ListContainerStream(req *v0alpha.ListContainerStreamRequest, srv GatewayService_ListContainerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContainerStream not implemented")
}
func (*UnimplementedGatewayServiceServer) ListContainer(ctx context.Context, req *v0alpha.ListContainerRequest) (*v0alpha.ListContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (*UnimplementedGatewayServiceServer) ListFileVersions(ctx context.Context, req *v0alpha.ListFileVersionsRequest) (*v0alpha.ListFileVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileVersions not implemented")
}
func (*UnimplementedGatewayServiceServer) ListRecycleStream(req *ListRecycleStreamRequest, srv GatewayService_ListRecycleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecycleStream not implemented")
}
func (*UnimplementedGatewayServiceServer) ListRecycle(ctx context.Context, req *ListRecycleRequest) (*v0alpha.ListRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecycle not implemented")
}
func (*UnimplementedGatewayServiceServer) Move(ctx context.Context, req *v0alpha.MoveRequest) (*v0alpha.MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (*UnimplementedGatewayServiceServer) PurgeRecycle(ctx context.Context, req *PurgeRecycleRequest) (*v0alpha.PurgeRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRecycle not implemented")
}
func (*UnimplementedGatewayServiceServer) RestoreFileVersion(ctx context.Context, req *v0alpha.RestoreFileVersionRequest) (*v0alpha.RestoreFileVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFileVersion not implemented")
}
func (*UnimplementedGatewayServiceServer) RestoreRecycleItem(ctx context.Context, req *v0alpha.RestoreRecycleItemRequest) (*v0alpha.RestoreRecycleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRecycleItem not implemented")
}
func (*UnimplementedGatewayServiceServer) Stat(ctx context.Context, req *v0alpha.StatRequest) (*v0alpha.StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedGatewayServiceServer) SetArbitraryMetadata(ctx context.Context, req *v0alpha.SetArbitraryMetadataRequest) (*v0alpha.SetArbitraryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArbitraryMetadata not implemented")
}
func (*UnimplementedGatewayServiceServer) UnsetArbitraryMetadata(ctx context.Context, req *v0alpha.UnsetArbitraryMetadataRequest) (*v0alpha.UnsetArbitraryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetArbitraryMetadata not implemented")
}
func (*UnimplementedGatewayServiceServer) CreateShare(ctx context.Context, req *v0alpha2.CreateShareRequest) (*v0alpha2.CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (*UnimplementedGatewayServiceServer) RemoveShare(ctx context.Context, req *v0alpha2.RemoveShareRequest) (*v0alpha2.RemoveShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetShare(ctx context.Context, req *v0alpha2.GetShareRequest) (*v0alpha2.GetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (*UnimplementedGatewayServiceServer) ListShares(ctx context.Context, req *v0alpha2.ListSharesRequest) (*v0alpha2.ListSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdateShare(ctx context.Context, req *v0alpha2.UpdateShareRequest) (*v0alpha2.UpdateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (*UnimplementedGatewayServiceServer) ListReceivedShares(ctx context.Context, req *v0alpha2.ListReceivedSharesRequest) (*v0alpha2.ListReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdateReceivedShare(ctx context.Context, req *v0alpha2.UpdateReceivedShareRequest) (*v0alpha2.UpdateReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetReceivedShare(ctx context.Context, req *v0alpha2.GetReceivedShareRequest) (*v0alpha2.GetReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedShare not implemented")
}
func (*UnimplementedGatewayServiceServer) SetKey(ctx context.Context, req *v0alpha3.SetKeyRequest) (*v0alpha3.SetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (*UnimplementedGatewayServiceServer) GetKey(ctx context.Context, req *v0alpha3.GetKeyRequest) (*v0alpha3.GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (*UnimplementedGatewayServiceServer) CreatePublicShare(ctx context.Context, req *v0alpha4.CreatePublicShareRequest) (*v0alpha4.CreatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicShare not implemented")
}
func (*UnimplementedGatewayServiceServer) RemovePublicShare(ctx context.Context, req *v0alpha4.RemovePublicShareRequest) (*v0alpha4.RemovePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetPublicShare(ctx context.Context, req *v0alpha4.GetPublicShareRequest) (*v0alpha4.GetPublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetPublicShareByToken(ctx context.Context, req *v0alpha4.GetPublicShareByTokenRequest) (*v0alpha4.GetPublicShareByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShareByToken not implemented")
}
func (*UnimplementedGatewayServiceServer) ListPublicShares(ctx context.Context, req *v0alpha4.ListPublicSharesRequest) (*v0alpha4.ListPublicSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdatePublicShare(ctx context.Context, req *v0alpha4.UpdatePublicShareRequest) (*v0alpha4.UpdatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicShare not implemented")
}
func (*UnimplementedGatewayServiceServer) CreateOCMShare(ctx context.Context, req *v0alpha5.CreateOCMShareRequest) (*v0alpha5.CreateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOCMShare not implemented")
}
func (*UnimplementedGatewayServiceServer) RemoveOCMShare(ctx context.Context, req *v0alpha5.RemoveOCMShareRequest) (*v0alpha5.RemoveOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOCMShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetOCMShare(ctx context.Context, req *v0alpha5.GetOCMShareRequest) (*v0alpha5.GetOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCMShare not implemented")
}
func (*UnimplementedGatewayServiceServer) ListOCMShares(ctx context.Context, req *v0alpha5.ListOCMSharesRequest) (*v0alpha5.ListOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOCMShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdateOCMShare(ctx context.Context, req *v0alpha5.UpdateOCMShareRequest) (*v0alpha5.UpdateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOCMShare not implemented")
}
func (*UnimplementedGatewayServiceServer) ListReceivedOCMShares(ctx context.Context, req *v0alpha5.ListReceivedOCMSharesRequest) (*v0alpha5.ListReceivedOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedOCMShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdateReceivedOCMShare(ctx context.Context, req *v0alpha5.UpdateReceivedOCMShareRequest) (*v0alpha5.UpdateReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedOCMShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetAppProviders(ctx context.Context, req *v0alpha6.GetAppProvidersRequest) (*v0alpha6.GetAppProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppProviders not implemented")
}
func (*UnimplementedGatewayServiceServer) ListAppProviders(ctx context.Context, req *v0alpha6.ListAppProvidersRequest) (*v0alpha6.ListAppProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppProviders not implemented")
}
func (*UnimplementedGatewayServiceServer) GetUser(ctx context.Context, req *v0alpha7.GetUserRequest) (*v0alpha7.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedGatewayServiceServer) GetUserGroups(ctx context.Context, req *v0alpha7.GetUserGroupsRequest) (*v0alpha7.GetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (*UnimplementedGatewayServiceServer) IsInGroup(ctx context.Context, req *v0alpha7.IsInGroupRequest) (*v0alpha7.IsInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInGroup not implemented")
}
func (*UnimplementedGatewayServiceServer) FindUsers(ctx context.Context, req *v0alpha7.FindUsersRequest) (*v0alpha7.FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}

func RegisterGatewayServiceServer(s *grpc.Server, srv GatewayServiceServer) {
	s.RegisterService(&_GatewayService_serviceDesc, srv)
}

func _GatewayService_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha1.GenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GenerateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GenerateAccessToken(ctx, req.(*v0alpha1.GenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha1.WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).WhoAmI(ctx, req.(*v0alpha1.WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateContainer(ctx, req.(*v0alpha.CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Delete(ctx, req.(*v0alpha.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetPath(ctx, req.(*v0alpha.GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetQuota(ctx, req.(*GetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InitiateFileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.InitiateFileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InitiateFileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/InitiateFileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InitiateFileDownload(ctx, req.(*v0alpha.InitiateFileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InitiateFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.InitiateFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InitiateFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/InitiateFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InitiateFileUpload(ctx, req.(*v0alpha.InitiateFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v0alpha.ListContainerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).ListContainerStream(m, &gatewayServiceListContainerStreamServer{stream})
}

type GatewayService_ListContainerStreamServer interface {
	Send(*v0alpha.ListContainerStreamResponse) error
	grpc.ServerStream
}

type gatewayServiceListContainerStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceListContainerStreamServer) Send(m *v0alpha.ListContainerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayService_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListContainer(ctx, req.(*v0alpha.ListContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListFileVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListFileVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListFileVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListFileVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListFileVersions(ctx, req.(*v0alpha.ListFileVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListRecycleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecycleStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).ListRecycleStream(m, &gatewayServiceListRecycleStreamServer{stream})
}

type GatewayService_ListRecycleStreamServer interface {
	Send(*v0alpha.ListRecycleStreamResponse) error
	grpc.ServerStream
}

type gatewayServiceListRecycleStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceListRecycleStreamServer) Send(m *v0alpha.ListRecycleStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayService_ListRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListRecycle(ctx, req.(*ListRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Move(ctx, req.(*v0alpha.MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_PurgeRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).PurgeRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/PurgeRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).PurgeRecycle(ctx, req.(*PurgeRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RestoreFileVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.RestoreFileVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RestoreFileVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RestoreFileVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RestoreFileVersion(ctx, req.(*v0alpha.RestoreFileVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RestoreRecycleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.RestoreRecycleItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RestoreRecycleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RestoreRecycleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RestoreRecycleItem(ctx, req.(*v0alpha.RestoreRecycleItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Stat(ctx, req.(*v0alpha.StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SetArbitraryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.SetArbitraryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SetArbitraryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/SetArbitraryMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SetArbitraryMetadata(ctx, req.(*v0alpha.SetArbitraryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UnsetArbitraryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.UnsetArbitraryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UnsetArbitraryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UnsetArbitraryMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UnsetArbitraryMetadata(ctx, req.(*v0alpha.UnsetArbitraryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateShare(ctx, req.(*v0alpha2.CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.RemoveShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RemoveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveShare(ctx, req.(*v0alpha2.RemoveShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.GetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetShare(ctx, req.(*v0alpha2.GetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListShares(ctx, req.(*v0alpha2.ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.UpdateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateShare(ctx, req.(*v0alpha2.UpdateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListReceivedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListReceivedShares(ctx, req.(*v0alpha2.ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.UpdateReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdateReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateReceivedShare(ctx, req.(*v0alpha2.UpdateReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.GetReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetReceivedShare(ctx, req.(*v0alpha2.GetReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha3.SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SetKey(ctx, req.(*v0alpha3.SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha3.GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetKey(ctx, req.(*v0alpha3.GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha4.CreatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/CreatePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreatePublicShare(ctx, req.(*v0alpha4.CreatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemovePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha4.RemovePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemovePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RemovePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemovePublicShare(ctx, req.(*v0alpha4.RemovePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetPublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha4.GetPublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetPublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetPublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetPublicShare(ctx, req.(*v0alpha4.GetPublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetPublicShareByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha4.GetPublicShareByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetPublicShareByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetPublicShareByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetPublicShareByToken(ctx, req.(*v0alpha4.GetPublicShareByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListPublicShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha4.ListPublicSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListPublicShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListPublicShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListPublicShares(ctx, req.(*v0alpha4.ListPublicSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha4.UpdatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdatePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdatePublicShare(ctx, req.(*v0alpha4.UpdatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.CreateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/CreateOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateOCMShare(ctx, req.(*v0alpha5.CreateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.RemoveOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RemoveOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveOCMShare(ctx, req.(*v0alpha5.RemoveOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.GetOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetOCMShare(ctx, req.(*v0alpha5.GetOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.ListOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListOCMShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListOCMShares(ctx, req.(*v0alpha5.ListOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.UpdateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdateOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateOCMShare(ctx, req.(*v0alpha5.UpdateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListReceivedOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.ListReceivedOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListReceivedOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListReceivedOCMShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListReceivedOCMShares(ctx, req.(*v0alpha5.ListReceivedOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha5.UpdateReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdateReceivedOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateReceivedOCMShare(ctx, req.(*v0alpha5.UpdateReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetAppProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha6.GetAppProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetAppProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetAppProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetAppProviders(ctx, req.(*v0alpha6.GetAppProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListAppProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha6.ListAppProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListAppProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListAppProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListAppProviders(ctx, req.(*v0alpha6.ListAppProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha7.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUser(ctx, req.(*v0alpha7.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha7.GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserGroups(ctx, req.(*v0alpha7.GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_IsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha7.IsInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).IsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/IsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).IsInGroup(ctx, req.(*v0alpha7.IsInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha7.FindUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).FindUsers(ctx, req.(*v0alpha7.FindUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.gatewayv0alpha.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAccessToken",
			Handler:    _GatewayService_GenerateAccessToken_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _GatewayService_WhoAmI_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _GatewayService_CreateContainer_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayService_Delete_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _GatewayService_GetPath_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _GatewayService_GetQuota_Handler,
		},
		{
			MethodName: "InitiateFileDownload",
			Handler:    _GatewayService_InitiateFileDownload_Handler,
		},
		{
			MethodName: "InitiateFileUpload",
			Handler:    _GatewayService_InitiateFileUpload_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _GatewayService_ListContainer_Handler,
		},
		{
			MethodName: "ListFileVersions",
			Handler:    _GatewayService_ListFileVersions_Handler,
		},
		{
			MethodName: "ListRecycle",
			Handler:    _GatewayService_ListRecycle_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _GatewayService_Move_Handler,
		},
		{
			MethodName: "PurgeRecycle",
			Handler:    _GatewayService_PurgeRecycle_Handler,
		},
		{
			MethodName: "RestoreFileVersion",
			Handler:    _GatewayService_RestoreFileVersion_Handler,
		},
		{
			MethodName: "RestoreRecycleItem",
			Handler:    _GatewayService_RestoreRecycleItem_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _GatewayService_Stat_Handler,
		},
		{
			MethodName: "SetArbitraryMetadata",
			Handler:    _GatewayService_SetArbitraryMetadata_Handler,
		},
		{
			MethodName: "UnsetArbitraryMetadata",
			Handler:    _GatewayService_UnsetArbitraryMetadata_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _GatewayService_CreateShare_Handler,
		},
		{
			MethodName: "RemoveShare",
			Handler:    _GatewayService_RemoveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _GatewayService_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _GatewayService_ListShares_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _GatewayService_UpdateShare_Handler,
		},
		{
			MethodName: "ListReceivedShares",
			Handler:    _GatewayService_ListReceivedShares_Handler,
		},
		{
			MethodName: "UpdateReceivedShare",
			Handler:    _GatewayService_UpdateReceivedShare_Handler,
		},
		{
			MethodName: "GetReceivedShare",
			Handler:    _GatewayService_GetReceivedShare_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _GatewayService_SetKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _GatewayService_GetKey_Handler,
		},
		{
			MethodName: "CreatePublicShare",
			Handler:    _GatewayService_CreatePublicShare_Handler,
		},
		{
			MethodName: "RemovePublicShare",
			Handler:    _GatewayService_RemovePublicShare_Handler,
		},
		{
			MethodName: "GetPublicShare",
			Handler:    _GatewayService_GetPublicShare_Handler,
		},
		{
			MethodName: "GetPublicShareByToken",
			Handler:    _GatewayService_GetPublicShareByToken_Handler,
		},
		{
			MethodName: "ListPublicShares",
			Handler:    _GatewayService_ListPublicShares_Handler,
		},
		{
			MethodName: "UpdatePublicShare",
			Handler:    _GatewayService_UpdatePublicShare_Handler,
		},
		{
			MethodName: "CreateOCMShare",
			Handler:    _GatewayService_CreateOCMShare_Handler,
		},
		{
			MethodName: "RemoveOCMShare",
			Handler:    _GatewayService_RemoveOCMShare_Handler,
		},
		{
			MethodName: "GetOCMShare",
			Handler:    _GatewayService_GetOCMShare_Handler,
		},
		{
			MethodName: "ListOCMShares",
			Handler:    _GatewayService_ListOCMShares_Handler,
		},
		{
			MethodName: "UpdateOCMShare",
			Handler:    _GatewayService_UpdateOCMShare_Handler,
		},
		{
			MethodName: "ListReceivedOCMShares",
			Handler:    _GatewayService_ListReceivedOCMShares_Handler,
		},
		{
			MethodName: "UpdateReceivedOCMShare",
			Handler:    _GatewayService_UpdateReceivedOCMShare_Handler,
		},
		{
			MethodName: "GetAppProviders",
			Handler:    _GatewayService_GetAppProviders_Handler,
		},
		{
			MethodName: "ListAppProviders",
			Handler:    _GatewayService_ListAppProviders_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GatewayService_GetUser_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _GatewayService_GetUserGroups_Handler,
		},
		{
			MethodName: "IsInGroup",
			Handler:    _GatewayService_IsInGroup_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _GatewayService_FindUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContainerStream",
			Handler:       _GatewayService_ListContainerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecycleStream",
			Handler:       _GatewayService_ListRecycleStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cs3/gateway/v0alpha/gateway.proto",
}
