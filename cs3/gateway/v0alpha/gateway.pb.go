// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/gateway/v0alpha/gateway.proto

package gatewayv0alphapb

import (
	context "context"
	fmt "fmt"
	v0alpha1 "github.com/cs3org/go-cs3apis/cs3/auth/v0alpha"
	v0alpha "github.com/cs3org/go-cs3apis/cs3/storageprovider/v0alpha"
	types "github.com/cs3org/go-cs3apis/cs3/types"
	v0alpha2 "github.com/cs3org/go-cs3apis/cs3/usershareprovider/v0alpha"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetQuotaRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetQuotaRequest) Reset()         { *m = GetQuotaRequest{} }
func (m *GetQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*GetQuotaRequest) ProtoMessage()    {}
func (*GetQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{0}
}

func (m *GetQuotaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetQuotaRequest.Unmarshal(m, b)
}
func (m *GetQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetQuotaRequest.Marshal(b, m, deterministic)
}
func (m *GetQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQuotaRequest.Merge(m, src)
}
func (m *GetQuotaRequest) XXX_Size() int {
	return xxx_messageInfo_GetQuotaRequest.Size(m)
}
func (m *GetQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQuotaRequest proto.InternalMessageInfo

func (m *GetQuotaRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetQuotaRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type ListRecycleRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The start time range to query for recycle items.
	// The value is the Unix Epoch timestamp in seconds.
	FromTs *types.Timestamp `protobuf:"bytes,3,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The end time range to query for recycle items.
	// The value is Unix Epoch timestamp in seconds.
	ToTs                 *types.Timestamp `protobuf:"bytes,4,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRecycleRequest) Reset()         { *m = ListRecycleRequest{} }
func (m *ListRecycleRequest) String() string { return proto.CompactTextString(m) }
func (*ListRecycleRequest) ProtoMessage()    {}
func (*ListRecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{1}
}

func (m *ListRecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRecycleRequest.Unmarshal(m, b)
}
func (m *ListRecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRecycleRequest.Marshal(b, m, deterministic)
}
func (m *ListRecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecycleRequest.Merge(m, src)
}
func (m *ListRecycleRequest) XXX_Size() int {
	return xxx_messageInfo_ListRecycleRequest.Size(m)
}
func (m *ListRecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecycleRequest proto.InternalMessageInfo

func (m *ListRecycleRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListRecycleRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *ListRecycleRequest) GetFromTs() *types.Timestamp {
	if m != nil {
		return m.FromTs
	}
	return nil
}

func (m *ListRecycleRequest) GetToTs() *types.Timestamp {
	if m != nil {
		return m.ToTs
	}
	return nil
}

type ListRecycleStreamRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The start time range to query for recycle items.
	// The value is the Unix Epoch timestamp in seconds.
	FromTs *types.Timestamp `protobuf:"bytes,3,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The end time range to query for recycle items.
	// The value is Unix Epoch timestamp in seconds.
	ToTs                 *types.Timestamp `protobuf:"bytes,4,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListRecycleStreamRequest) Reset()         { *m = ListRecycleStreamRequest{} }
func (m *ListRecycleStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ListRecycleStreamRequest) ProtoMessage()    {}
func (*ListRecycleStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{2}
}

func (m *ListRecycleStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRecycleStreamRequest.Unmarshal(m, b)
}
func (m *ListRecycleStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRecycleStreamRequest.Marshal(b, m, deterministic)
}
func (m *ListRecycleStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecycleStreamRequest.Merge(m, src)
}
func (m *ListRecycleStreamRequest) XXX_Size() int {
	return xxx_messageInfo_ListRecycleStreamRequest.Size(m)
}
func (m *ListRecycleStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecycleStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecycleStreamRequest proto.InternalMessageInfo

func (m *ListRecycleStreamRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetFromTs() *types.Timestamp {
	if m != nil {
		return m.FromTs
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetToTs() *types.Timestamp {
	if m != nil {
		return m.ToTs
	}
	return nil
}

type PurgeRecycleRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *v0alpha.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PurgeRecycleRequest) Reset()         { *m = PurgeRecycleRequest{} }
func (m *PurgeRecycleRequest) String() string { return proto.CompactTextString(m) }
func (*PurgeRecycleRequest) ProtoMessage()    {}
func (*PurgeRecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc3eb7237c57d7d, []int{3}
}

func (m *PurgeRecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeRecycleRequest.Unmarshal(m, b)
}
func (m *PurgeRecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeRecycleRequest.Marshal(b, m, deterministic)
}
func (m *PurgeRecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeRecycleRequest.Merge(m, src)
}
func (m *PurgeRecycleRequest) XXX_Size() int {
	return xxx_messageInfo_PurgeRecycleRequest.Size(m)
}
func (m *PurgeRecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeRecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeRecycleRequest proto.InternalMessageInfo

func (m *PurgeRecycleRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *PurgeRecycleRequest) GetRef() *v0alpha.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func init() {
	proto.RegisterType((*GetQuotaRequest)(nil), "cs3.gatewayv0alpha.GetQuotaRequest")
	proto.RegisterType((*ListRecycleRequest)(nil), "cs3.gatewayv0alpha.ListRecycleRequest")
	proto.RegisterType((*ListRecycleStreamRequest)(nil), "cs3.gatewayv0alpha.ListRecycleStreamRequest")
	proto.RegisterType((*PurgeRecycleRequest)(nil), "cs3.gatewayv0alpha.PurgeRecycleRequest")
}

func init() { proto.RegisterFile("cs3/gateway/v0alpha/gateway.proto", fileDescriptor_abc3eb7237c57d7d) }

var fileDescriptor_abc3eb7237c57d7d = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x97, 0x4d, 0x8f, 0x1b, 0x35,
	0x1c, 0xc6, 0x35, 0xdb, 0x25, 0x45, 0xde, 0x42, 0xb7, 0xde, 0x02, 0xab, 0x20, 0xf1, 0xb2, 0x12,
	0xd0, 0x65, 0x69, 0x36, 0xdd, 0xb0, 0x4d, 0x39, 0x26, 0xa9, 0x88, 0x22, 0x81, 0x1a, 0x26, 0x69,
	0x79, 0x11, 0x52, 0xe5, 0x9d, 0xfc, 0xb3, 0x19, 0x91, 0x19, 0x4f, 0x6d, 0x4f, 0xaa, 0x20, 0x71,
	0x40, 0x1c, 0x78, 0xf9, 0x18, 0x1c, 0xf9, 0x28, 0x1c, 0x39, 0xf1, 0x1d, 0xf8, 0x12, 0xc8, 0x63,
	0x3b, 0x19, 0x27, 0xe9, 0xc4, 0xc3, 0x61, 0x0f, 0x5c, 0x22, 0xc5, 0x7e, 0x7e, 0xff, 0xe7, 0xb1,
	0x3d, 0xb6, 0x67, 0xd0, 0xbb, 0x01, 0x6f, 0x9c, 0x5e, 0x12, 0x01, 0xcf, 0xc9, 0xfc, 0x74, 0x56,
	0x27, 0xd3, 0x64, 0x42, 0xcc, 0xff, 0x5a, 0xc2, 0xa8, 0xa0, 0x18, 0x07, 0xbc, 0x51, 0xd3, 0x4d,
	0x5a, 0x51, 0x7d, 0x53, 0x62, 0x24, 0x15, 0x93, 0x05, 0x23, 0xff, 0x28, 0xa0, 0x7a, 0x22, 0x3b,
	0xb9, 0xa0, 0x8c, 0x5c, 0x42, 0xc2, 0xe8, 0x2c, 0x1c, 0x01, 0x5b, 0xe8, 0x18, 0x70, 0x9a, 0xb2,
	0x00, 0xb8, 0x16, 0xdf, 0x2b, 0x12, 0xaf, 0xb4, 0x6b, 0xe4, 0x35, 0x89, 0x88, 0x79, 0x02, 0x5c,
	0xfd, 0xea, 0xe6, 0x73, 0xd9, 0x9c, 0x72, 0x60, 0x7c, 0x42, 0xd8, 0x7a, 0xad, 0xb5, 0x1e, 0x85,
	0x1d, 0xa5, 0xe8, 0x66, 0x17, 0xc4, 0x17, 0x29, 0x15, 0xc4, 0x87, 0x67, 0x29, 0x70, 0x81, 0x8f,
	0x51, 0x85, 0x26, 0xe4, 0x59, 0x0a, 0x87, 0xde, 0x3b, 0xde, 0x9d, 0xbd, 0xb3, 0x5b, 0x35, 0x39,
	0x05, 0xca, 0xeb, 0x51, 0xd6, 0xe1, 0x6b, 0x01, 0x6e, 0xa2, 0x6b, 0x0c, 0xc6, 0x87, 0x3b, 0x99,
	0xee, 0xbd, 0x4c, 0xb7, 0x12, 0x5a, 0xfb, 0xd7, 0x7c, 0x18, 0x03, 0x83, 0x38, 0x00, 0x5f, 0x12,
	0x47, 0x7f, 0x79, 0x08, 0x7f, 0x16, 0x72, 0xe1, 0x43, 0x30, 0x0f, 0xa6, 0x70, 0x85, 0xd6, 0xf8,
	0x2e, 0xba, 0x3e, 0x66, 0x34, 0x7a, 0x2a, 0xf8, 0xe1, 0xb5, 0x0c, 0xbe, 0x9d, 0x33, 0x19, 0x86,
	0x11, 0x70, 0x41, 0xa2, 0xc4, 0xaf, 0x48, 0xd1, 0x90, 0xe3, 0x63, 0xf4, 0x92, 0xa0, 0x52, 0xbc,
	0x5b, 0x20, 0xde, 0x15, 0x74, 0xc8, 0x8f, 0xfe, 0xf6, 0xd0, 0x61, 0x6e, 0x50, 0x03, 0xc1, 0x80,
	0x44, 0xff, 0x8f, 0xa1, 0xcd, 0xd1, 0x41, 0x3f, 0x65, 0x97, 0x70, 0xf5, 0xeb, 0x75, 0xf6, 0xcf,
	0x1b, 0xe8, 0xd5, 0xae, 0xda, 0x7f, 0x03, 0x60, 0xb3, 0x30, 0x00, 0x9c, 0xa0, 0x83, 0x2e, 0xc4,
	0xc0, 0x88, 0x80, 0x56, 0x10, 0x00, 0xe7, 0x43, 0xfa, 0x1d, 0xc4, 0xf8, 0x24, 0xab, 0x2a, 0xb7,
	0xa2, 0x29, 0xb5, 0x41, 0xa5, 0xa3, 0x57, 0x3f, 0x72, 0x13, 0xf3, 0x84, 0xc6, 0x1c, 0x70, 0x0f,
	0x55, 0xbe, 0x9c, 0xd0, 0x56, 0xd4, 0xc3, 0x6f, 0xad, 0x71, 0xaa, 0xc3, 0xd4, 0x7d, 0xfb, 0x85,
	0xfd, 0xba, 0xd4, 0xf7, 0xe8, 0x66, 0x87, 0x01, 0x11, 0xd0, 0xa1, 0xb1, 0x20, 0x61, 0x0c, 0x0c,
	0x9f, 0x15, 0x4d, 0xc7, 0x8a, 0xd8, 0xf8, 0x34, 0x4a, 0x31, 0xda, 0xfb, 0x29, 0xaa, 0x3c, 0x84,
	0x29, 0x08, 0xc0, 0xc7, 0x45, 0xb8, 0xd2, 0x18, 0xa7, 0x0f, 0x5d, 0xa4, 0xda, 0xe0, 0x02, 0x5d,
	0xef, 0x82, 0xe8, 0x13, 0x31, 0xc1, 0x85, 0x98, 0x16, 0x19, 0x8b, 0x13, 0x27, 0xad, 0xf6, 0x00,
	0xf4, 0xb2, 0x39, 0xb2, 0xf0, 0x36, 0x30, 0x7f, 0xb0, 0xe9, 0x25, 0xdf, 0x2a, 0xd6, 0x36, 0xbf,
	0x7a, 0xe8, 0x76, 0x2f, 0x0e, 0x45, 0x48, 0x04, 0x7c, 0x1a, 0x4e, 0xe1, 0x21, 0x7d, 0x1e, 0x4f,
	0x29, 0x19, 0xe1, 0x66, 0x51, 0x99, 0x4d, 0x84, 0xf1, 0x7f, 0x50, 0x1e, 0xd4, 0x59, 0x7e, 0xf2,
	0x10, 0xce, 0x0b, 0x1e, 0x27, 0x59, 0x92, 0x73, 0xd7, 0x82, 0x4a, 0x6f, 0x72, 0xdc, 0x2f, 0x8b,
	0xe9, 0x14, 0xbf, 0x78, 0xe8, 0x40, 0x9e, 0x6f, 0x8b, 0xe7, 0x4a, 0x9d, 0x70, 0xb8, 0xb0, 0xde,
	0x06, 0xc0, 0xe4, 0x68, 0x96, 0xe6, 0x54, 0x90, 0xba, 0x87, 0x05, 0x7a, 0xc5, 0x12, 0xe0, 0xba,
	0x73, 0x2d, 0xe3, 0x7e, 0xaf, 0x04, 0xa1, 0x27, 0xe0, 0x07, 0xb4, 0x2f, 0x3b, 0xe4, 0xd4, 0x3c,
	0x01, 0xc6, 0x43, 0x1a, 0x73, 0xdc, 0xd8, 0x56, 0x26, 0xaf, 0x36, 0xde, 0x1f, 0x97, 0x83, 0x16,
	0x27, 0xc7, 0xad, 0xb5, 0xeb, 0x05, 0xab, 0x87, 0xda, 0x7e, 0x41, 0xa9, 0xbd, 0xe8, 0x16, 0xaa,
	0x9e, 0x6f, 0x33, 0x5e, 0xa1, 0x16, 0x13, 0x3e, 0x46, 0x7b, 0xb9, 0x6e, 0xfc, 0xfe, 0x16, 0x57,
	0xe3, 0x77, 0xea, 0xe8, 0xb7, 0x18, 0xe3, 0xd7, 0x68, 0xf7, 0x73, 0x3a, 0x03, 0xfc, 0x41, 0x11,
	0x28, 0x15, 0xc6, 0xe1, 0xce, 0x76, 0xa1, 0x2e, 0x1d, 0xa2, 0x1b, 0xf9, 0x3b, 0x4c, 0x5b, 0xac,
	0x8c, 0x61, 0xc3, 0x2d, 0x57, 0x2d, 0x7c, 0xb6, 0x6c, 0x20, 0xb7, 0x5f, 0x7d, 0x90, 0x04, 0xe4,
	0x56, 0xb2, 0x78, 0xbf, 0xae, 0xeb, 0x9d, 0xf6, 0xeb, 0x26, 0x6c, 0x3d, 0x85, 0x0e, 0xd8, 0x13,
	0x10, 0x39, 0xa5, 0xc8, 0xe9, 0xcb, 0xa4, 0xb0, 0xb0, 0xe5, 0x8a, 0x0e, 0x04, 0x11, 0xc5, 0x2b,
	0x2a, 0x15, 0x4e, 0x2b, 0xaa, 0x84, 0xba, 0x34, 0x43, 0x7b, 0xea, 0xa6, 0x1b, 0xc8, 0x37, 0x5b,
	0x7d, 0x06, 0xac, 0xbd, 0xe9, 0xda, 0x97, 0x62, 0x26, 0xb5, 0xcf, 0x00, 0x37, 0x62, 0xe9, 0xe9,
	0x43, 0x44, 0x67, 0x6e, 0x9e, 0x39, 0xa9, 0xa3, 0xa7, 0x45, 0x2c, 0x9e, 0x5c, 0x79, 0xe3, 0x29,
	0xc3, 0xbb, 0xc5, 0xb8, 0xd1, 0x19, 0xb7, 0x9a, 0xab, 0x5c, 0x5b, 0x51, 0x84, 0xe4, 0xb6, 0xcc,
	0x1a, 0x39, 0x3e, 0x2d, 0xa6, 0x97, 0x4a, 0x7b, 0xab, 0x38, 0x01, 0xcb, 0xf9, 0x7c, 0x9c, 0x8c,
	0x5c, 0xd7, 0x30, 0x27, 0x75, 0x9c, 0x4f, 0x8b, 0xd0, 0x9e, 0x3f, 0x2f, 0xbf, 0x3e, 0x20, 0x9c,
	0xc1, 0x48, 0x8f, 0xb6, 0xb9, 0x3d, 0xbc, 0x4d, 0xd8, 0x17, 0x7b, 0x29, 0x50, 0x27, 0xf9, 0xcd,
	0x43, 0x07, 0x2a, 0xa1, 0x25, 0xc0, 0x0f, 0x5c, 0x06, 0x65, 0x21, 0x26, 0xcb, 0x27, 0xff, 0x81,
	0xd4, 0x61, 0x7e, 0xf4, 0xd0, 0x7e, 0x17, 0xec, 0xa8, 0xfa, 0xb4, 0x28, 0x7a, 0x80, 0x36, 0xc6,
	0xb8, 0x5f, 0x16, 0x53, 0x19, 0xda, 0x11, 0x7a, 0x3d, 0xa0, 0xd1, 0x86, 0x93, 0xb9, 0x7d, 0x43,
	0x7f, 0x04, 0xf4, 0xe5, 0x77, 0x6b, 0xdf, 0xfb, 0x66, 0xdf, 0xee, 0x4f, 0x2e, 0x7e, 0xdf, 0xa9,
	0x74, 0xda, 0x8f, 0xbe, 0x6a, 0xb5, 0xff, 0xd8, 0xc1, 0x9d, 0x41, 0xa3, 0xa6, 0xf5, 0x4f, 0xea,
	0x2d, 0xd9, 0xff, 0x67, 0xd6, 0xf8, 0xad, 0xdd, 0x78, 0x51, 0xc9, 0xbe, 0x82, 0x1b, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x73, 0x7f, 0xe9, 0x13, 0x09, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayServiceClient interface {
	// *****************************************************************/
	// ************************ AUTH ******** **************************/
	// *****************************************************************/
	GenerateAccessToken(ctx context.Context, in *v0alpha1.GenerateAccessTokenRequest, opts ...grpc.CallOption) (*v0alpha1.GenerateAccessTokenResponse, error)
	WhoAmI(ctx context.Context, in *v0alpha1.WhoAmIRequest, opts ...grpc.CallOption) (*v0alpha1.WhoAmIResponse, error)
	// *****************************************************************/
	// ************************ STORAGE PROVIDER ***********************/
	// *****************************************************************/
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(ctx context.Context, in *v0alpha.CreateContainerRequest, opts ...grpc.CallOption) (*v0alpha.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(ctx context.Context, in *v0alpha.DeleteRequest, opts ...grpc.CallOption) (*v0alpha.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(ctx context.Context, in *v0alpha.GetPathRequest, opts ...grpc.CallOption) (*v0alpha.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(ctx context.Context, in *v0alpha.GetQuotaRequest, opts ...grpc.CallOption) (*v0alpha.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(ctx context.Context, in *v0alpha.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*v0alpha.InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(ctx context.Context, in *v0alpha.InitiateFileUploadRequest, opts ...grpc.CallOption) (*v0alpha.InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(ctx context.Context, in *v0alpha.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayService_ListContainerStreamClient, error)
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(ctx context.Context, in *v0alpha.ListContainerRequest, opts ...grpc.CallOption) (*v0alpha.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(ctx context.Context, in *v0alpha.ListFileVersionsRequest, opts ...grpc.CallOption) (*v0alpha.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayService_ListRecycleStreamClient, error)
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*v0alpha.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(ctx context.Context, in *v0alpha.MoveRequest, opts ...grpc.CallOption) (*v0alpha.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...grpc.CallOption) (*v0alpha.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(ctx context.Context, in *v0alpha.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v0alpha.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(ctx context.Context, in *v0alpha.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v0alpha.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(ctx context.Context, in *v0alpha.StatRequest, opts ...grpc.CallOption) (*v0alpha.StatResponse, error)
	// *****************************************************************/
	// ************************ USER SHARE PROVIDER ********************/
	// *****************************************************************/
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *v0alpha2.CreateShareRequest, opts ...grpc.CallOption) (*v0alpha2.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *v0alpha2.RemoveShareRequest, opts ...grpc.CallOption) (*v0alpha2.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *v0alpha2.GetShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *v0alpha2.ListSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *v0alpha2.UpdateShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(ctx context.Context, in *v0alpha2.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *v0alpha2.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *v0alpha2.GetReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetReceivedShareResponse, error)
}

type gatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewGatewayServiceClient(cc *grpc.ClientConn) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) GenerateAccessToken(ctx context.Context, in *v0alpha1.GenerateAccessTokenRequest, opts ...grpc.CallOption) (*v0alpha1.GenerateAccessTokenResponse, error) {
	out := new(v0alpha1.GenerateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GenerateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) WhoAmI(ctx context.Context, in *v0alpha1.WhoAmIRequest, opts ...grpc.CallOption) (*v0alpha1.WhoAmIResponse, error) {
	out := new(v0alpha1.WhoAmIResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateContainer(ctx context.Context, in *v0alpha.CreateContainerRequest, opts ...grpc.CallOption) (*v0alpha.CreateContainerResponse, error) {
	out := new(v0alpha.CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Delete(ctx context.Context, in *v0alpha.DeleteRequest, opts ...grpc.CallOption) (*v0alpha.DeleteResponse, error) {
	out := new(v0alpha.DeleteResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetPath(ctx context.Context, in *v0alpha.GetPathRequest, opts ...grpc.CallOption) (*v0alpha.GetPathResponse, error) {
	out := new(v0alpha.GetPathResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetQuota(ctx context.Context, in *v0alpha.GetQuotaRequest, opts ...grpc.CallOption) (*v0alpha.GetQuotaResponse, error) {
	out := new(v0alpha.GetQuotaResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InitiateFileDownload(ctx context.Context, in *v0alpha.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*v0alpha.InitiateFileDownloadResponse, error) {
	out := new(v0alpha.InitiateFileDownloadResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/InitiateFileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InitiateFileUpload(ctx context.Context, in *v0alpha.InitiateFileUploadRequest, opts ...grpc.CallOption) (*v0alpha.InitiateFileUploadResponse, error) {
	out := new(v0alpha.InitiateFileUploadResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/InitiateFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListContainerStream(ctx context.Context, in *v0alpha.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayService_ListContainerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayService_serviceDesc.Streams[0], "/cs3.gatewayv0alpha.GatewayService/ListContainerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceListContainerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_ListContainerStreamClient interface {
	Recv() (*v0alpha.ListContainerStreamResponse, error)
	grpc.ClientStream
}

type gatewayServiceListContainerStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceListContainerStreamClient) Recv() (*v0alpha.ListContainerStreamResponse, error) {
	m := new(v0alpha.ListContainerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) ListContainer(ctx context.Context, in *v0alpha.ListContainerRequest, opts ...grpc.CallOption) (*v0alpha.ListContainerResponse, error) {
	out := new(v0alpha.ListContainerResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListFileVersions(ctx context.Context, in *v0alpha.ListFileVersionsRequest, opts ...grpc.CallOption) (*v0alpha.ListFileVersionsResponse, error) {
	out := new(v0alpha.ListFileVersionsResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListFileVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayService_ListRecycleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayService_serviceDesc.Streams[1], "/cs3.gatewayv0alpha.GatewayService/ListRecycleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceListRecycleStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_ListRecycleStreamClient interface {
	Recv() (*v0alpha.ListRecycleStreamResponse, error)
	grpc.ClientStream
}

type gatewayServiceListRecycleStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceListRecycleStreamClient) Recv() (*v0alpha.ListRecycleStreamResponse, error) {
	m := new(v0alpha.ListRecycleStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*v0alpha.ListRecycleResponse, error) {
	out := new(v0alpha.ListRecycleResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Move(ctx context.Context, in *v0alpha.MoveRequest, opts ...grpc.CallOption) (*v0alpha.MoveResponse, error) {
	out := new(v0alpha.MoveResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...grpc.CallOption) (*v0alpha.PurgeRecycleResponse, error) {
	out := new(v0alpha.PurgeRecycleResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/PurgeRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RestoreFileVersion(ctx context.Context, in *v0alpha.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v0alpha.RestoreFileVersionResponse, error) {
	out := new(v0alpha.RestoreFileVersionResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RestoreFileVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RestoreRecycleItem(ctx context.Context, in *v0alpha.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v0alpha.RestoreRecycleItemResponse, error) {
	out := new(v0alpha.RestoreRecycleItemResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RestoreRecycleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Stat(ctx context.Context, in *v0alpha.StatRequest, opts ...grpc.CallOption) (*v0alpha.StatResponse, error) {
	out := new(v0alpha.StatResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateShare(ctx context.Context, in *v0alpha2.CreateShareRequest, opts ...grpc.CallOption) (*v0alpha2.CreateShareResponse, error) {
	out := new(v0alpha2.CreateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/CreateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveShare(ctx context.Context, in *v0alpha2.RemoveShareRequest, opts ...grpc.CallOption) (*v0alpha2.RemoveShareResponse, error) {
	out := new(v0alpha2.RemoveShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/RemoveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetShare(ctx context.Context, in *v0alpha2.GetShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetShareResponse, error) {
	out := new(v0alpha2.GetShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListShares(ctx context.Context, in *v0alpha2.ListSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListSharesResponse, error) {
	out := new(v0alpha2.ListSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateShare(ctx context.Context, in *v0alpha2.UpdateShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateShareResponse, error) {
	out := new(v0alpha2.UpdateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListReceivedShares(ctx context.Context, in *v0alpha2.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v0alpha2.ListReceivedSharesResponse, error) {
	out := new(v0alpha2.ListReceivedSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/ListReceivedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateReceivedShare(ctx context.Context, in *v0alpha2.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.UpdateReceivedShareResponse, error) {
	out := new(v0alpha2.UpdateReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/UpdateReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetReceivedShare(ctx context.Context, in *v0alpha2.GetReceivedShareRequest, opts ...grpc.CallOption) (*v0alpha2.GetReceivedShareResponse, error) {
	out := new(v0alpha2.GetReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gatewayv0alpha.GatewayService/GetReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
type GatewayServiceServer interface {
	// *****************************************************************/
	// ************************ AUTH ******** **************************/
	// *****************************************************************/
	GenerateAccessToken(context.Context, *v0alpha1.GenerateAccessTokenRequest) (*v0alpha1.GenerateAccessTokenResponse, error)
	WhoAmI(context.Context, *v0alpha1.WhoAmIRequest) (*v0alpha1.WhoAmIResponse, error)
	// *****************************************************************/
	// ************************ STORAGE PROVIDER ***********************/
	// *****************************************************************/
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(context.Context, *v0alpha.CreateContainerRequest) (*v0alpha.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(context.Context, *v0alpha.DeleteRequest) (*v0alpha.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(context.Context, *v0alpha.GetPathRequest) (*v0alpha.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(context.Context, *v0alpha.GetQuotaRequest) (*v0alpha.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(context.Context, *v0alpha.InitiateFileDownloadRequest) (*v0alpha.InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(context.Context, *v0alpha.InitiateFileUploadRequest) (*v0alpha.InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(*v0alpha.ListContainerStreamRequest, GatewayService_ListContainerStreamServer) error
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(context.Context, *v0alpha.ListContainerRequest) (*v0alpha.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(context.Context, *v0alpha.ListFileVersionsRequest) (*v0alpha.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(*ListRecycleStreamRequest, GatewayService_ListRecycleStreamServer) error
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(context.Context, *ListRecycleRequest) (*v0alpha.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(context.Context, *v0alpha.MoveRequest) (*v0alpha.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(context.Context, *PurgeRecycleRequest) (*v0alpha.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(context.Context, *v0alpha.RestoreFileVersionRequest) (*v0alpha.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(context.Context, *v0alpha.RestoreRecycleItemRequest) (*v0alpha.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(context.Context, *v0alpha.StatRequest) (*v0alpha.StatResponse, error)
	// *****************************************************************/
	// ************************ USER SHARE PROVIDER ********************/
	// *****************************************************************/
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *v0alpha2.CreateShareRequest) (*v0alpha2.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *v0alpha2.RemoveShareRequest) (*v0alpha2.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *v0alpha2.GetShareRequest) (*v0alpha2.GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *v0alpha2.ListSharesRequest) (*v0alpha2.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *v0alpha2.UpdateShareRequest) (*v0alpha2.UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(context.Context, *v0alpha2.ListReceivedSharesRequest) (*v0alpha2.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *v0alpha2.UpdateReceivedShareRequest) (*v0alpha2.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *v0alpha2.GetReceivedShareRequest) (*v0alpha2.GetReceivedShareResponse, error)
}

// UnimplementedGatewayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (*UnimplementedGatewayServiceServer) GenerateAccessToken(ctx context.Context, req *v0alpha1.GenerateAccessTokenRequest) (*v0alpha1.GenerateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessToken not implemented")
}
func (*UnimplementedGatewayServiceServer) WhoAmI(ctx context.Context, req *v0alpha1.WhoAmIRequest) (*v0alpha1.WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (*UnimplementedGatewayServiceServer) CreateContainer(ctx context.Context, req *v0alpha.CreateContainerRequest) (*v0alpha.CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedGatewayServiceServer) Delete(ctx context.Context, req *v0alpha.DeleteRequest) (*v0alpha.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGatewayServiceServer) GetPath(ctx context.Context, req *v0alpha.GetPathRequest) (*v0alpha.GetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}
func (*UnimplementedGatewayServiceServer) GetQuota(ctx context.Context, req *v0alpha.GetQuotaRequest) (*v0alpha.GetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (*UnimplementedGatewayServiceServer) InitiateFileDownload(ctx context.Context, req *v0alpha.InitiateFileDownloadRequest) (*v0alpha.InitiateFileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileDownload not implemented")
}
func (*UnimplementedGatewayServiceServer) InitiateFileUpload(ctx context.Context, req *v0alpha.InitiateFileUploadRequest) (*v0alpha.InitiateFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileUpload not implemented")
}
func (*UnimplementedGatewayServiceServer) ListContainerStream(req *v0alpha.ListContainerStreamRequest, srv GatewayService_ListContainerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContainerStream not implemented")
}
func (*UnimplementedGatewayServiceServer) ListContainer(ctx context.Context, req *v0alpha.ListContainerRequest) (*v0alpha.ListContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (*UnimplementedGatewayServiceServer) ListFileVersions(ctx context.Context, req *v0alpha.ListFileVersionsRequest) (*v0alpha.ListFileVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileVersions not implemented")
}
func (*UnimplementedGatewayServiceServer) ListRecycleStream(req *ListRecycleStreamRequest, srv GatewayService_ListRecycleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecycleStream not implemented")
}
func (*UnimplementedGatewayServiceServer) ListRecycle(ctx context.Context, req *ListRecycleRequest) (*v0alpha.ListRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecycle not implemented")
}
func (*UnimplementedGatewayServiceServer) Move(ctx context.Context, req *v0alpha.MoveRequest) (*v0alpha.MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (*UnimplementedGatewayServiceServer) PurgeRecycle(ctx context.Context, req *PurgeRecycleRequest) (*v0alpha.PurgeRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRecycle not implemented")
}
func (*UnimplementedGatewayServiceServer) RestoreFileVersion(ctx context.Context, req *v0alpha.RestoreFileVersionRequest) (*v0alpha.RestoreFileVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFileVersion not implemented")
}
func (*UnimplementedGatewayServiceServer) RestoreRecycleItem(ctx context.Context, req *v0alpha.RestoreRecycleItemRequest) (*v0alpha.RestoreRecycleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRecycleItem not implemented")
}
func (*UnimplementedGatewayServiceServer) Stat(ctx context.Context, req *v0alpha.StatRequest) (*v0alpha.StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedGatewayServiceServer) CreateShare(ctx context.Context, req *v0alpha2.CreateShareRequest) (*v0alpha2.CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (*UnimplementedGatewayServiceServer) RemoveShare(ctx context.Context, req *v0alpha2.RemoveShareRequest) (*v0alpha2.RemoveShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetShare(ctx context.Context, req *v0alpha2.GetShareRequest) (*v0alpha2.GetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (*UnimplementedGatewayServiceServer) ListShares(ctx context.Context, req *v0alpha2.ListSharesRequest) (*v0alpha2.ListSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdateShare(ctx context.Context, req *v0alpha2.UpdateShareRequest) (*v0alpha2.UpdateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (*UnimplementedGatewayServiceServer) ListReceivedShares(ctx context.Context, req *v0alpha2.ListReceivedSharesRequest) (*v0alpha2.ListReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedShares not implemented")
}
func (*UnimplementedGatewayServiceServer) UpdateReceivedShare(ctx context.Context, req *v0alpha2.UpdateReceivedShareRequest) (*v0alpha2.UpdateReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedShare not implemented")
}
func (*UnimplementedGatewayServiceServer) GetReceivedShare(ctx context.Context, req *v0alpha2.GetReceivedShareRequest) (*v0alpha2.GetReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedShare not implemented")
}

func RegisterGatewayServiceServer(s *grpc.Server, srv GatewayServiceServer) {
	s.RegisterService(&_GatewayService_serviceDesc, srv)
}

func _GatewayService_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha1.GenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GenerateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GenerateAccessToken(ctx, req.(*v0alpha1.GenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha1.WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).WhoAmI(ctx, req.(*v0alpha1.WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateContainer(ctx, req.(*v0alpha.CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Delete(ctx, req.(*v0alpha.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetPath(ctx, req.(*v0alpha.GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.GetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetQuota(ctx, req.(*v0alpha.GetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InitiateFileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.InitiateFileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InitiateFileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/InitiateFileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InitiateFileDownload(ctx, req.(*v0alpha.InitiateFileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InitiateFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.InitiateFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InitiateFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/InitiateFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InitiateFileUpload(ctx, req.(*v0alpha.InitiateFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v0alpha.ListContainerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).ListContainerStream(m, &gatewayServiceListContainerStreamServer{stream})
}

type GatewayService_ListContainerStreamServer interface {
	Send(*v0alpha.ListContainerStreamResponse) error
	grpc.ServerStream
}

type gatewayServiceListContainerStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceListContainerStreamServer) Send(m *v0alpha.ListContainerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayService_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListContainer(ctx, req.(*v0alpha.ListContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListFileVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.ListFileVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListFileVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListFileVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListFileVersions(ctx, req.(*v0alpha.ListFileVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListRecycleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecycleStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).ListRecycleStream(m, &gatewayServiceListRecycleStreamServer{stream})
}

type GatewayService_ListRecycleStreamServer interface {
	Send(*v0alpha.ListRecycleStreamResponse) error
	grpc.ServerStream
}

type gatewayServiceListRecycleStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceListRecycleStreamServer) Send(m *v0alpha.ListRecycleStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayService_ListRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListRecycle(ctx, req.(*ListRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Move(ctx, req.(*v0alpha.MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_PurgeRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).PurgeRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/PurgeRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).PurgeRecycle(ctx, req.(*PurgeRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RestoreFileVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.RestoreFileVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RestoreFileVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RestoreFileVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RestoreFileVersion(ctx, req.(*v0alpha.RestoreFileVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RestoreRecycleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.RestoreRecycleItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RestoreRecycleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RestoreRecycleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RestoreRecycleItem(ctx, req.(*v0alpha.RestoreRecycleItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha.StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Stat(ctx, req.(*v0alpha.StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateShare(ctx, req.(*v0alpha2.CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.RemoveShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/RemoveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveShare(ctx, req.(*v0alpha2.RemoveShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.GetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetShare(ctx, req.(*v0alpha2.GetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListShares(ctx, req.(*v0alpha2.ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.UpdateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateShare(ctx, req.(*v0alpha2.UpdateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/ListReceivedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListReceivedShares(ctx, req.(*v0alpha2.ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.UpdateReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/UpdateReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateReceivedShare(ctx, req.(*v0alpha2.UpdateReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0alpha2.GetReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gatewayv0alpha.GatewayService/GetReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetReceivedShare(ctx, req.(*v0alpha2.GetReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.gatewayv0alpha.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAccessToken",
			Handler:    _GatewayService_GenerateAccessToken_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _GatewayService_WhoAmI_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _GatewayService_CreateContainer_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayService_Delete_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _GatewayService_GetPath_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _GatewayService_GetQuota_Handler,
		},
		{
			MethodName: "InitiateFileDownload",
			Handler:    _GatewayService_InitiateFileDownload_Handler,
		},
		{
			MethodName: "InitiateFileUpload",
			Handler:    _GatewayService_InitiateFileUpload_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _GatewayService_ListContainer_Handler,
		},
		{
			MethodName: "ListFileVersions",
			Handler:    _GatewayService_ListFileVersions_Handler,
		},
		{
			MethodName: "ListRecycle",
			Handler:    _GatewayService_ListRecycle_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _GatewayService_Move_Handler,
		},
		{
			MethodName: "PurgeRecycle",
			Handler:    _GatewayService_PurgeRecycle_Handler,
		},
		{
			MethodName: "RestoreFileVersion",
			Handler:    _GatewayService_RestoreFileVersion_Handler,
		},
		{
			MethodName: "RestoreRecycleItem",
			Handler:    _GatewayService_RestoreRecycleItem_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _GatewayService_Stat_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _GatewayService_CreateShare_Handler,
		},
		{
			MethodName: "RemoveShare",
			Handler:    _GatewayService_RemoveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _GatewayService_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _GatewayService_ListShares_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _GatewayService_UpdateShare_Handler,
		},
		{
			MethodName: "ListReceivedShares",
			Handler:    _GatewayService_ListReceivedShares_Handler,
		},
		{
			MethodName: "UpdateReceivedShare",
			Handler:    _GatewayService_UpdateReceivedShare_Handler,
		},
		{
			MethodName: "GetReceivedShare",
			Handler:    _GatewayService_GetReceivedShare_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContainerStream",
			Handler:       _GatewayService_ListContainerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecycleStream",
			Handler:       _GatewayService_ListRecycleStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cs3/gateway/v0alpha/gateway.proto",
}
