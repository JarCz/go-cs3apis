// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/userprovider/v0alpha/userprovider.proto

package userproviderv0alphapb

import (
	context "context"
	fmt "fmt"
	v0alpha "github.com/cs3org/go-cs3apis/cs3/auth/v0alpha"
	rpc "github.com/cs3org/go-cs3apis/cs3/rpc"
	types "github.com/cs3org/go-cs3apis/cs3/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetUserRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	UserId               *types.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{0}
}

func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserRequest.Unmarshal(m, b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserRequest.Size(m)
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserRequest) GetUserId() *types.UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

type GetUserResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The user information.
	User                 *v0alpha.User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetUserResponse) Reset()         { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()    {}
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{1}
}

func (m *GetUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserResponse.Unmarshal(m, b)
}
func (m *GetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserResponse.Marshal(b, m, deterministic)
}
func (m *GetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserResponse.Merge(m, src)
}
func (m *GetUserResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserResponse.Size(m)
}
func (m *GetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserResponse proto.InternalMessageInfo

func (m *GetUserResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetUserResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserResponse) GetUser() *v0alpha.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserGroupsRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	UserId               *types.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetUserGroupsRequest) Reset()         { *m = GetUserGroupsRequest{} }
func (m *GetUserGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserGroupsRequest) ProtoMessage()    {}
func (*GetUserGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{2}
}

func (m *GetUserGroupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserGroupsRequest.Unmarshal(m, b)
}
func (m *GetUserGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserGroupsRequest.Marshal(b, m, deterministic)
}
func (m *GetUserGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserGroupsRequest.Merge(m, src)
}
func (m *GetUserGroupsRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserGroupsRequest.Size(m)
}
func (m *GetUserGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserGroupsRequest proto.InternalMessageInfo

func (m *GetUserGroupsRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserGroupsRequest) GetUserId() *types.UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

type GetUserGroupsResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The groups for the user.
	Groups               []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserGroupsResponse) Reset()         { *m = GetUserGroupsResponse{} }
func (m *GetUserGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserGroupsResponse) ProtoMessage()    {}
func (*GetUserGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{3}
}

func (m *GetUserGroupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserGroupsResponse.Unmarshal(m, b)
}
func (m *GetUserGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserGroupsResponse.Marshal(b, m, deterministic)
}
func (m *GetUserGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserGroupsResponse.Merge(m, src)
}
func (m *GetUserGroupsResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserGroupsResponse.Size(m)
}
func (m *GetUserGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserGroupsResponse proto.InternalMessageInfo

func (m *GetUserGroupsResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetUserGroupsResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserGroupsResponse) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type IsInGroupRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	UserId *types.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// REQUIRED.
	// The group to check.
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsInGroupRequest) Reset()         { *m = IsInGroupRequest{} }
func (m *IsInGroupRequest) String() string { return proto.CompactTextString(m) }
func (*IsInGroupRequest) ProtoMessage()    {}
func (*IsInGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{4}
}

func (m *IsInGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsInGroupRequest.Unmarshal(m, b)
}
func (m *IsInGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsInGroupRequest.Marshal(b, m, deterministic)
}
func (m *IsInGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsInGroupRequest.Merge(m, src)
}
func (m *IsInGroupRequest) XXX_Size() int {
	return xxx_messageInfo_IsInGroupRequest.Size(m)
}
func (m *IsInGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsInGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsInGroupRequest proto.InternalMessageInfo

func (m *IsInGroupRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *IsInGroupRequest) GetUserId() *types.UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *IsInGroupRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type IsInGroupResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The groups for the user.
	Groups               []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsInGroupResponse) Reset()         { *m = IsInGroupResponse{} }
func (m *IsInGroupResponse) String() string { return proto.CompactTextString(m) }
func (*IsInGroupResponse) ProtoMessage()    {}
func (*IsInGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{5}
}

func (m *IsInGroupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsInGroupResponse.Unmarshal(m, b)
}
func (m *IsInGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsInGroupResponse.Marshal(b, m, deterministic)
}
func (m *IsInGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsInGroupResponse.Merge(m, src)
}
func (m *IsInGroupResponse) XXX_Size() int {
	return xxx_messageInfo_IsInGroupResponse.Size(m)
}
func (m *IsInGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsInGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsInGroupResponse proto.InternalMessageInfo

func (m *IsInGroupResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IsInGroupResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *IsInGroupResponse) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type FindUsersRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED. TODO(labkode): create propper filters for most common searchs.
	// The filter to apply.
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUsersRequest) Reset()         { *m = FindUsersRequest{} }
func (m *FindUsersRequest) String() string { return proto.CompactTextString(m) }
func (*FindUsersRequest) ProtoMessage()    {}
func (*FindUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{6}
}

func (m *FindUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUsersRequest.Unmarshal(m, b)
}
func (m *FindUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUsersRequest.Marshal(b, m, deterministic)
}
func (m *FindUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUsersRequest.Merge(m, src)
}
func (m *FindUsersRequest) XXX_Size() int {
	return xxx_messageInfo_FindUsersRequest.Size(m)
}
func (m *FindUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUsersRequest proto.InternalMessageInfo

func (m *FindUsersRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *FindUsersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type FindUsersResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The groups for the user.
	Users                []*v0alpha.User `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FindUsersResponse) Reset()         { *m = FindUsersResponse{} }
func (m *FindUsersResponse) String() string { return proto.CompactTextString(m) }
func (*FindUsersResponse) ProtoMessage()    {}
func (*FindUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aded59a32602d0df, []int{7}
}

func (m *FindUsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUsersResponse.Unmarshal(m, b)
}
func (m *FindUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUsersResponse.Marshal(b, m, deterministic)
}
func (m *FindUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUsersResponse.Merge(m, src)
}
func (m *FindUsersResponse) XXX_Size() int {
	return xxx_messageInfo_FindUsersResponse.Size(m)
}
func (m *FindUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindUsersResponse proto.InternalMessageInfo

func (m *FindUsersResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FindUsersResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *FindUsersResponse) GetUsers() []*v0alpha.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*GetUserRequest)(nil), "cs3.userproviderv0alpha.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "cs3.userproviderv0alpha.GetUserResponse")
	proto.RegisterType((*GetUserGroupsRequest)(nil), "cs3.userproviderv0alpha.GetUserGroupsRequest")
	proto.RegisterType((*GetUserGroupsResponse)(nil), "cs3.userproviderv0alpha.GetUserGroupsResponse")
	proto.RegisterType((*IsInGroupRequest)(nil), "cs3.userproviderv0alpha.IsInGroupRequest")
	proto.RegisterType((*IsInGroupResponse)(nil), "cs3.userproviderv0alpha.IsInGroupResponse")
	proto.RegisterType((*FindUsersRequest)(nil), "cs3.userproviderv0alpha.FindUsersRequest")
	proto.RegisterType((*FindUsersResponse)(nil), "cs3.userproviderv0alpha.FindUsersResponse")
}

func init() {
	proto.RegisterFile("cs3/userprovider/v0alpha/userprovider.proto", fileDescriptor_aded59a32602d0df)
}

var fileDescriptor_aded59a32602d0df = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0x12, 0x41,
	0x14, 0xce, 0x82, 0xdd, 0x86, 0x63, 0xb4, 0x30, 0x42, 0x4b, 0xd6, 0x1b, 0xb2, 0x37, 0x85, 0x36,
	0x2e, 0x4d, 0x79, 0x02, 0xa9, 0xb5, 0xe1, 0x0a, 0x32, 0x84, 0xc6, 0x98, 0x26, 0x66, 0x59, 0xc6,
	0x76, 0x93, 0x96, 0x99, 0xce, 0x0f, 0x89, 0x57, 0xbd, 0xf0, 0x05, 0x7a, 0xe1, 0x13, 0x78, 0xa9,
	0x6f, 0xe2, 0x53, 0x99, 0xf9, 0x11, 0x17, 0x5a, 0x0a, 0x31, 0xd9, 0x78, 0x03, 0x99, 0x73, 0xbe,
	0x33, 0xdf, 0x77, 0xce, 0x7c, 0x1c, 0xe0, 0x30, 0x11, 0x9d, 0xb6, 0x12, 0x84, 0x33, 0x4e, 0x67,
	0xe9, 0x84, 0xf0, 0xf6, 0xec, 0x28, 0xbe, 0x66, 0x57, 0xf1, 0x42, 0x30, 0x62, 0x9c, 0x4a, 0x8a,
	0xf6, 0x12, 0xd1, 0x89, 0xb2, 0x71, 0x87, 0x0d, 0x1a, 0xfa, 0x96, 0x58, 0xc9, 0xab, 0x79, 0x35,
	0x27, 0x82, 0x2a, 0x9e, 0x10, 0x61, 0x4b, 0x83, 0xaa, 0x46, 0x70, 0x96, 0xb4, 0x85, 0x8c, 0xa5,
	0xfa, 0x13, 0xad, 0xe9, 0xa8, 0xfc, 0xc2, 0x88, 0xb0, 0x9f, 0x36, 0x1c, 0x5e, 0xc2, 0xcb, 0x33,
	0x22, 0x47, 0x82, 0x70, 0x4c, 0x6e, 0x15, 0x11, 0x12, 0xb5, 0xc0, 0xa7, 0x2c, 0xbe, 0x55, 0xa4,
	0xee, 0x35, 0xbc, 0xe6, 0xf3, 0xe3, 0x4a, 0xa4, 0xa5, 0xd8, 0x9a, 0xbe, 0x49, 0x60, 0x07, 0x40,
	0x07, 0xb0, 0xad, 0x25, 0x7e, 0x4a, 0x27, 0xf5, 0xc2, 0x03, 0xac, 0xbe, 0xb3, 0x37, 0xc1, 0xbe,
	0x32, 0xdf, 0xe1, 0xbd, 0x07, 0x3b, 0x73, 0x26, 0xc1, 0xe8, 0x54, 0x10, 0xb4, 0x0f, 0xbe, 0xd5,
	0xe8, 0xa8, 0x76, 0x4c, 0x39, 0x67, 0x49, 0x34, 0x34, 0x61, 0xec, 0xd2, 0x19, 0x4d, 0x85, 0x75,
	0x9a, 0x5a, 0xf0, 0x4c, 0x33, 0xd6, 0x8b, 0x06, 0x58, 0x33, 0x40, 0x3d, 0x2e, 0x37, 0x2d, 0x23,
	0x0b, 0x1b, 0x48, 0x78, 0x03, 0x55, 0xa7, 0xe8, 0x8c, 0x53, 0xc5, 0x44, 0xce, 0x13, 0xf8, 0xea,
	0x41, 0x6d, 0x89, 0x2f, 0xc7, 0x39, 0xec, 0x82, 0x7f, 0x69, 0x58, 0xea, 0xc5, 0x46, 0xb1, 0x59,
	0xc2, 0xee, 0x14, 0xde, 0x41, 0xb9, 0x27, 0x7a, 0x53, 0xa3, 0x20, 0xdf, 0x86, 0x51, 0x15, 0xb6,
	0x0c, 0xa9, 0x79, 0x8b, 0x12, 0xb6, 0x87, 0xf0, 0x0e, 0x2a, 0x19, 0x01, 0xff, 0x61, 0x02, 0x23,
	0x28, 0xbf, 0x4f, 0xa7, 0x13, 0x2d, 0xf6, 0x5f, 0x9e, 0x7c, 0x17, 0xfc, 0xcf, 0xe9, 0xb5, 0x24,
	0xdc, 0x28, 0x28, 0x61, 0x77, 0x0a, 0xbf, 0x79, 0x50, 0xc9, 0xdc, 0x9b, 0x63, 0x63, 0x87, 0xb0,
	0xa5, 0x27, 0x6c, 0xfb, 0x5a, 0xe9, 0x71, 0x8b, 0x39, 0xfe, 0x59, 0x84, 0x57, 0xfa, 0x3c, 0x70,
	0x7b, 0x64, 0x48, 0xf8, 0x2c, 0x4d, 0x08, 0xba, 0x80, 0x6d, 0x67, 0x46, 0xb4, 0x1f, 0xad, 0x58,
	0x36, 0xd1, 0xe2, 0x6a, 0x08, 0x9a, 0xeb, 0x81, 0xae, 0xed, 0x29, 0xbc, 0x58, 0xb0, 0x3a, 0x7a,
	0xb3, 0xae, 0x74, 0xe1, 0x27, 0x18, 0x44, 0x9b, 0xc2, 0x1d, 0xdf, 0x18, 0x4a, 0x73, 0x53, 0xa1,
	0xd6, 0xca, 0xe2, 0x65, 0xe7, 0x07, 0x07, 0x9b, 0x40, 0xff, 0x72, 0xcc, 0xdf, 0xf7, 0x09, 0x8e,
	0x65, 0x6f, 0x3d, 0xc1, 0xf1, 0xc0, 0x2e, 0xdd, 0x7b, 0x0f, 0x5e, 0x27, 0xf4, 0x66, 0x55, 0x45,
	0xb7, 0x32, 0xca, 0x04, 0x07, 0x7a, 0x83, 0x0f, 0xbc, 0x8f, 0xb5, 0x47, 0x90, 0x6c, 0xfc, 0xbd,
	0x50, 0x3e, 0xe9, 0xf6, 0x3f, 0x8c, 0x86, 0xa7, 0x78, 0x80, 0xfb, 0xe7, 0xbd, 0x77, 0xa7, 0xf8,
	0x47, 0x61, 0xef, 0x64, 0xd8, 0x89, 0xb2, 0x76, 0x38, 0x3f, 0x7a, 0xab, 0xe1, 0xbf, 0x4c, 0xe6,
	0xe2, 0x91, 0xcc, 0xd8, 0x37, 0x7f, 0x14, 0x9d, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x55,
	0x55, 0x63, 0xbf, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserProviderServiceClient is the client API for UserProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserProviderServiceClient interface {
	// Gets the information about an user by its user id.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(ctx context.Context, in *IsInGroupRequest, opts ...grpc.CallOption) (*IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error)
}

type userProviderServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserProviderServiceClient(cc *grpc.ClientConn) UserProviderServiceClient {
	return &userProviderServiceClient{cc}
}

func (c *userProviderServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/cs3.userproviderv0alpha.UserProviderService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProviderServiceClient) GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GetUserGroupsResponse, error) {
	out := new(GetUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/cs3.userproviderv0alpha.UserProviderService/GetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProviderServiceClient) IsInGroup(ctx context.Context, in *IsInGroupRequest, opts ...grpc.CallOption) (*IsInGroupResponse, error) {
	out := new(IsInGroupResponse)
	err := c.cc.Invoke(ctx, "/cs3.userproviderv0alpha.UserProviderService/IsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProviderServiceClient) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error) {
	out := new(FindUsersResponse)
	err := c.cc.Invoke(ctx, "/cs3.userproviderv0alpha.UserProviderService/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProviderServiceServer is the server API for UserProviderService service.
type UserProviderServiceServer interface {
	// Gets the information about an user by its user id.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(context.Context, *GetUserGroupsRequest) (*GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(context.Context, *IsInGroupRequest) (*IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *FindUsersRequest) (*FindUsersResponse, error)
}

// UnimplementedUserProviderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserProviderServiceServer struct {
}

func (*UnimplementedUserProviderServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserProviderServiceServer) GetUserGroups(ctx context.Context, req *GetUserGroupsRequest) (*GetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (*UnimplementedUserProviderServiceServer) IsInGroup(ctx context.Context, req *IsInGroupRequest) (*IsInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInGroup not implemented")
}
func (*UnimplementedUserProviderServiceServer) FindUsers(ctx context.Context, req *FindUsersRequest) (*FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}

func RegisterUserProviderServiceServer(s *grpc.Server, srv UserProviderServiceServer) {
	s.RegisterService(&_UserProviderService_serviceDesc, srv)
}

func _UserProviderService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProviderServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.userproviderv0alpha.UserProviderService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProviderServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProviderService_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProviderServiceServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.userproviderv0alpha.UserProviderService/GetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProviderServiceServer).GetUserGroups(ctx, req.(*GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProviderService_IsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProviderServiceServer).IsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.userproviderv0alpha.UserProviderService/IsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProviderServiceServer).IsInGroup(ctx, req.(*IsInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProviderService_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProviderServiceServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.userproviderv0alpha.UserProviderService/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProviderServiceServer).FindUsers(ctx, req.(*FindUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.userproviderv0alpha.UserProviderService",
	HandlerType: (*UserProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserProviderService_GetUser_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _UserProviderService_GetUserGroups_Handler,
		},
		{
			MethodName: "IsInGroup",
			Handler:    _UserProviderService_IsInGroup_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _UserProviderService_FindUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/userprovider/v0alpha/userprovider.proto",
}
